{"ast":null,"code":"var _jsxFileName = \"/home/david/Documents/projects/works/sass/backend api key/frontend/src/components/MapComponent.js\";\nimport React from 'react';\nimport { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';\nimport L from 'leaflet';\n\n// Fix for default markers in react-leaflet\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\ndelete L.Icon.Default.prototype._getIconUrl;\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\n  iconUrl: require('leaflet/dist/images/marker-icon.png'),\n  shadowUrl: require('leaflet/dist/images/marker-shadow.png')\n});\nfunction MapComponent({\n  logs\n}) {\n  const geoLogs = logs.filter(log => log.country && log.city);\n\n  // Group logs by location for better visualization\n  const locationGroups = geoLogs.reduce((acc, log) => {\n    const key = `${log.country}-${log.city}`;\n    if (!acc[key]) {\n      acc[key] = {\n        country: log.country,\n        city: log.city,\n        count: 0,\n        lat: 0,\n        lng: 0,\n        logs: []\n      };\n    }\n    acc[key].count += 1;\n    acc[key].logs.push(log);\n    // For demo purposes, we'll use approximate coordinates\n    // In a real app, you'd use a geocoding service\n    if (acc[key].lat === 0 && acc[key].lng === 0) {\n      // Set some default coordinates based on country\n      const coords = getApproximateCoords(log.country, log.city);\n      acc[key].lat = coords.lat;\n      acc[key].lng = coords.lng;\n    }\n    return acc;\n  }, {});\n  const locations = Object.values(locationGroups);\n  return /*#__PURE__*/_jsxDEV(MapContainer, {\n    center: [20, 0],\n    zoom: 2,\n    style: {\n      height: '100%',\n      width: '100%'\n    },\n    children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n      url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n      attribution: \"\\xA9 <a href=\\\"https://www.openstreetmap.org/copyright\\\">OpenStreetMap</a> contributors\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), locations.map((location, index) => /*#__PURE__*/_jsxDEV(Marker, {\n      position: [location.lat, location.lng],\n      children: /*#__PURE__*/_jsxDEV(Popup, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: [location.city, \", \", location.country]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Requests: \", location.count]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Latest: \", new Date(location.logs[0].time).toLocaleString()]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n}\n\n// Helper function to get approximate coordinates\n_c = MapComponent;\nfunction getApproximateCoords(country, city) {\n  // This is a very basic implementation\n  // In production, use a proper geocoding service\n  const coords = {\n    'Nigeria-Lagos': {\n      lat: 6.5244,\n      lng: 3.3792\n    },\n    'Nigeria-Abuja': {\n      lat: 9.0765,\n      lng: 7.3986\n    },\n    'United States-New York': {\n      lat: 40.7128,\n      lng: -74.0060\n    },\n    'United Kingdom-London': {\n      lat: 51.5074,\n      lng: -0.1278\n    },\n    'Germany-Berlin': {\n      lat: 52.5200,\n      lng: 13.4050\n    },\n    'France-Paris': {\n      lat: 48.8566,\n      lng: 2.3522\n    },\n    'Japan-Tokyo': {\n      lat: 35.6762,\n      lng: 139.6503\n    },\n    'Australia-Sydney': {\n      lat: -33.8688,\n      lng: 151.2093\n    },\n    'Canada-Toronto': {\n      lat: 43.6532,\n      lng: -79.3832\n    },\n    'Brazil-São Paulo': {\n      lat: -23.5505,\n      lng: -46.6333\n    }\n  };\n  const key = `${country}-${city}`;\n  return coords[key] || {\n    lat: Math.random() * 180 - 90,\n    lng: Math.random() * 360 - 180\n  };\n}\nexport default MapComponent;\nvar _c;\n$RefreshReg$(_c, \"MapComponent\");","map":{"version":3,"names":["React","MapContainer","TileLayer","Marker","Popup","L","jsxDEV","_jsxDEV","Icon","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","require","iconUrl","shadowUrl","MapComponent","logs","geoLogs","filter","log","country","city","locationGroups","reduce","acc","key","count","lat","lng","push","coords","getApproximateCoords","locations","Object","values","center","zoom","style","height","width","children","url","attribution","fileName","_jsxFileName","lineNumber","columnNumber","map","location","index","position","Date","time","toLocaleString","_c","Math","random","$RefreshReg$"],"sources":["/home/david/Documents/projects/works/sass/backend api key/frontend/src/components/MapComponent.js"],"sourcesContent":["import React from 'react';\nimport { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';\nimport L from 'leaflet';\n\n// Fix for default markers in react-leaflet\ndelete L.Icon.Default.prototype._getIconUrl;\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\n  iconUrl: require('leaflet/dist/images/marker-icon.png'),\n  shadowUrl: require('leaflet/dist/images/marker-shadow.png'),\n});\n\nfunction MapComponent({ logs }) {\n  const geoLogs = logs.filter(log => log.country && log.city);\n\n  // Group logs by location for better visualization\n  const locationGroups = geoLogs.reduce((acc, log) => {\n    const key = `${log.country}-${log.city}`;\n    if (!acc[key]) {\n      acc[key] = {\n        country: log.country,\n        city: log.city,\n        count: 0,\n        lat: 0,\n        lng: 0,\n        logs: [],\n      };\n    }\n    acc[key].count += 1;\n    acc[key].logs.push(log);\n    // For demo purposes, we'll use approximate coordinates\n    // In a real app, you'd use a geocoding service\n    if (acc[key].lat === 0 && acc[key].lng === 0) {\n      // Set some default coordinates based on country\n      const coords = getApproximateCoords(log.country, log.city);\n      acc[key].lat = coords.lat;\n      acc[key].lng = coords.lng;\n    }\n    return acc;\n  }, {});\n\n  const locations = Object.values(locationGroups);\n\n  return (\n    <MapContainer center={[20, 0]} zoom={2} style={{ height: '100%', width: '100%' }}>\n      <TileLayer\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n      />\n      {locations.map((location, index) => (\n        <Marker key={index} position={[location.lat, location.lng]}>\n          <Popup>\n            <div>\n              <h4>{location.city}, {location.country}</h4>\n              <p>Requests: {location.count}</p>\n              <p>Latest: {new Date(location.logs[0].time).toLocaleString()}</p>\n            </div>\n          </Popup>\n        </Marker>\n      ))}\n    </MapContainer>\n  );\n}\n\n// Helper function to get approximate coordinates\nfunction getApproximateCoords(country, city) {\n  // This is a very basic implementation\n  // In production, use a proper geocoding service\n  const coords = {\n    'Nigeria-Lagos': { lat: 6.5244, lng: 3.3792 },\n    'Nigeria-Abuja': { lat: 9.0765, lng: 7.3986 },\n    'United States-New York': { lat: 40.7128, lng: -74.0060 },\n    'United Kingdom-London': { lat: 51.5074, lng: -0.1278 },\n    'Germany-Berlin': { lat: 52.5200, lng: 13.4050 },\n    'France-Paris': { lat: 48.8566, lng: 2.3522 },\n    'Japan-Tokyo': { lat: 35.6762, lng: 139.6503 },\n    'Australia-Sydney': { lat: -33.8688, lng: 151.2093 },\n    'Canada-Toronto': { lat: 43.6532, lng: -79.3832 },\n    'Brazil-São Paulo': { lat: -23.5505, lng: -46.6333 },\n  };\n\n  const key = `${country}-${city}`;\n  return coords[key] || { lat: Math.random() * 180 - 90, lng: Math.random() * 360 - 180 };\n}\n\nexport default MapComponent;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}