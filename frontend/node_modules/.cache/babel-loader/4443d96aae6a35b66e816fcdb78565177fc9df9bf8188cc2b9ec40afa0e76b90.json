{"ast":null,"code":"import React, { useEffect, useRef } from \"react\";\nimport Globe from \"three-globe\";\nfunction GlobeComponent({\n  logs\n}) {}\n\n// üåç Helper: Approximate coordinates for countries\n_c = GlobeComponent;\nfunction getApproximateCoords(country, city) {\n  const coords = {\n    Nigeria: {\n      lat: 9.082,\n      lng: 8.6753\n    },\n    \"United States\": {\n      lat: 37.0902,\n      lng: -95.7129\n    },\n    \"United Kingdom\": {\n      lat: 55.3781,\n      lng: -3.436\n    },\n    Germany: {\n      lat: 51.1657,\n      lng: 10.4515\n    },\n    France: {\n      lat: 46.2276,\n      lng: 2.2137\n    },\n    Japan: {\n      lat: 36.2048,\n      lng: 138.2529\n    },\n    Australia: {\n      lat: -25.2744,\n      lng: 133.7751\n    },\n    Canada: {\n      lat: 56.1304,\n      lng: -106.3468\n    },\n    Brazil: {\n      lat: -14.235,\n      lng: -51.9253\n    },\n    India: {\n      lat: 20.5937,\n      lng: 78.9629\n    },\n    China: {\n      lat: 35.8617,\n      lng: 104.1954\n    },\n    Russia: {\n      lat: 61.524,\n      lng: 105.3188\n    },\n    \"South Africa\": {\n      lat: -30.5595,\n      lng: 22.9375\n    },\n    Mexico: {\n      lat: 23.6345,\n      lng: -102.5528\n    },\n    Argentina: {\n      lat: -38.4161,\n      lng: -63.6167\n    }\n  };\n  return coords[country] || {\n    lat: Math.random() * 180 - 90,\n    lng: Math.random() * 360 - 180\n  };\n}\nexport default GlobeComponent;\nvar _c;\n$RefreshReg$(_c, \"GlobeComponent\");","map":{"version":3,"names":["React","useEffect","useRef","Globe","GlobeComponent","logs","_c","getApproximateCoords","country","city","coords","Nigeria","lat","lng","Germany","France","Japan","Australia","Canada","Brazil","India","China","Russia","Mexico","Argentina","Math","random","$RefreshReg$"],"sources":["/home/david/Documents/projects/works/sass/backend api key/frontend/src/components/GlobeComponent.js"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport Globe from \"three-globe\";\n\nfunction GlobeComponent({ logs }) {\n \n}\n\n// üåç Helper: Approximate coordinates for countries\nfunction getApproximateCoords(country, city) {\n  const coords = {\n    Nigeria: { lat: 9.082, lng: 8.6753 },\n    \"United States\": { lat: 37.0902, lng: -95.7129 },\n    \"United Kingdom\": { lat: 55.3781, lng: -3.436 },\n    Germany: { lat: 51.1657, lng: 10.4515 },\n    France: { lat: 46.2276, lng: 2.2137 },\n    Japan: { lat: 36.2048, lng: 138.2529 },\n    Australia: { lat: -25.2744, lng: 133.7751 },\n    Canada: { lat: 56.1304, lng: -106.3468 },\n    Brazil: { lat: -14.235, lng: -51.9253 },\n    India: { lat: 20.5937, lng: 78.9629 },\n    China: { lat: 35.8617, lng: 104.1954 },\n    Russia: { lat: 61.524, lng: 105.3188 },\n    \"South Africa\": { lat: -30.5595, lng: 22.9375 },\n    Mexico: { lat: 23.6345, lng: -102.5528 },\n    Argentina: { lat: -38.4161, lng: -63.6167 },\n  };\n\n  return (\n    coords[country] || {\n      lat: Math.random() * 180 - 90,\n      lng: Math.random() * 360 - 180,\n    }\n  );\n}\n\nexport default GlobeComponent;\n"],"mappings":"AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,OAAOC,KAAK,MAAM,aAAa;AAE/B,SAASC,cAAcA,CAAC;EAAEC;AAAK,CAAC,EAAE,CAElC;;AAEA;AAAAC,EAAA,GAJSF,cAAc;AAKvB,SAASG,oBAAoBA,CAACC,OAAO,EAAEC,IAAI,EAAE;EAC3C,MAAMC,MAAM,GAAG;IACbC,OAAO,EAAE;MAAEC,GAAG,EAAE,KAAK;MAAEC,GAAG,EAAE;IAAO,CAAC;IACpC,eAAe,EAAE;MAAED,GAAG,EAAE,OAAO;MAAEC,GAAG,EAAE,CAAC;IAAQ,CAAC;IAChD,gBAAgB,EAAE;MAAED,GAAG,EAAE,OAAO;MAAEC,GAAG,EAAE,CAAC;IAAM,CAAC;IAC/CC,OAAO,EAAE;MAAEF,GAAG,EAAE,OAAO;MAAEC,GAAG,EAAE;IAAQ,CAAC;IACvCE,MAAM,EAAE;MAAEH,GAAG,EAAE,OAAO;MAAEC,GAAG,EAAE;IAAO,CAAC;IACrCG,KAAK,EAAE;MAAEJ,GAAG,EAAE,OAAO;MAAEC,GAAG,EAAE;IAAS,CAAC;IACtCI,SAAS,EAAE;MAAEL,GAAG,EAAE,CAAC,OAAO;MAAEC,GAAG,EAAE;IAAS,CAAC;IAC3CK,MAAM,EAAE;MAAEN,GAAG,EAAE,OAAO;MAAEC,GAAG,EAAE,CAAC;IAAS,CAAC;IACxCM,MAAM,EAAE;MAAEP,GAAG,EAAE,CAAC,MAAM;MAAEC,GAAG,EAAE,CAAC;IAAQ,CAAC;IACvCO,KAAK,EAAE;MAAER,GAAG,EAAE,OAAO;MAAEC,GAAG,EAAE;IAAQ,CAAC;IACrCQ,KAAK,EAAE;MAAET,GAAG,EAAE,OAAO;MAAEC,GAAG,EAAE;IAAS,CAAC;IACtCS,MAAM,EAAE;MAAEV,GAAG,EAAE,MAAM;MAAEC,GAAG,EAAE;IAAS,CAAC;IACtC,cAAc,EAAE;MAAED,GAAG,EAAE,CAAC,OAAO;MAAEC,GAAG,EAAE;IAAQ,CAAC;IAC/CU,MAAM,EAAE;MAAEX,GAAG,EAAE,OAAO;MAAEC,GAAG,EAAE,CAAC;IAAS,CAAC;IACxCW,SAAS,EAAE;MAAEZ,GAAG,EAAE,CAAC,OAAO;MAAEC,GAAG,EAAE,CAAC;IAAQ;EAC5C,CAAC;EAED,OACEH,MAAM,CAACF,OAAO,CAAC,IAAI;IACjBI,GAAG,EAAEa,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,GAAG,EAAE;IAC7Bb,GAAG,EAAEY,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,GAAG;EAC7B,CAAC;AAEL;AAEA,eAAetB,cAAc;AAAC,IAAAE,EAAA;AAAAqB,YAAA,CAAArB,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}