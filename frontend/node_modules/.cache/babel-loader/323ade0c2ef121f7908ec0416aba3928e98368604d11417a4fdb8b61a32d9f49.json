{"ast":null,"code":"import { geoCentroid, geoDistance } from \"d3-geo\";\nimport { geoDelaunay, excess } from \"./delaunay.js\";\nexport function geoVoronoi(data) {\n  const v = function (data) {\n    v.delaunay = null;\n    v._data = data;\n    if (typeof v._data === \"object\" && v._data.type === \"FeatureCollection\") {\n      v._data = v._data.features;\n    }\n    if (typeof v._data === \"object\") {\n      const temp = v._data.map(d => [v._vx(d), v._vy(d), d]).filter(d => isFinite(d[0] + d[1]));\n      v.points = temp.map(d => [d[0], d[1]]);\n      v.valid = temp.map(d => d[2]);\n      v.delaunay = geoDelaunay(v.points);\n    }\n    return v;\n  };\n  v._vx = function (d) {\n    if (typeof d == \"object\" && \"type\" in d) {\n      return geoCentroid(d)[0];\n    }\n    if (0 in d) return d[0];\n  };\n  v._vy = function (d) {\n    if (typeof d == \"object\" && \"type\" in d) {\n      return geoCentroid(d)[1];\n    }\n    if (1 in d) return d[1];\n  };\n  v.x = function (f) {\n    if (!f) return v._vx;\n    v._vx = f;\n    return v;\n  };\n  v.y = function (f) {\n    if (!f) return v._vy;\n    v._vy = f;\n    return v;\n  };\n  v.polygons = function (data) {\n    if (data !== undefined) {\n      v(data);\n    }\n    if (!v.delaunay) return false;\n    const coll = {\n      type: \"FeatureCollection\",\n      features: []\n    };\n    if (v.valid.length === 0) return coll;\n    v.delaunay.polygons.forEach((poly, i) => coll.features.push({\n      type: \"Feature\",\n      geometry: !poly ? null : {\n        type: \"Polygon\",\n        coordinates: [[...poly, poly[0]].map(i => v.delaunay.centers[i])]\n      },\n      properties: {\n        site: v.valid[i],\n        sitecoordinates: v.points[i],\n        neighbours: v.delaunay.neighbors[i] // not part of the public API\n      }\n    }));\n    if (v.valid.length === 1) coll.features.push({\n      type: \"Feature\",\n      geometry: {\n        type: \"Sphere\"\n      },\n      properties: {\n        site: v.valid[0],\n        sitecoordinates: v.points[0],\n        neighbours: []\n      }\n    });\n    return coll;\n  };\n  v.triangles = function (data) {\n    if (data !== undefined) {\n      v(data);\n    }\n    if (!v.delaunay) return false;\n    return {\n      type: \"FeatureCollection\",\n      features: v.delaunay.triangles.map((tri, index) => {\n        tri = tri.map(i => v.points[i]);\n        tri.center = v.delaunay.centers[index];\n        return tri;\n      }).filter(tri => excess(tri) > 0).map(tri => ({\n        type: \"Feature\",\n        properties: {\n          circumcenter: tri.center\n        },\n        geometry: {\n          type: \"Polygon\",\n          coordinates: [[...tri, tri[0]]]\n        }\n      }))\n    };\n  };\n  v.links = function (data) {\n    if (data !== undefined) {\n      v(data);\n    }\n    if (!v.delaunay) return false;\n    const _distances = v.delaunay.edges.map(e => geoDistance(v.points[e[0]], v.points[e[1]])),\n      _urquart = v.delaunay.urquhart(_distances);\n    return {\n      type: \"FeatureCollection\",\n      features: v.delaunay.edges.map((e, i) => ({\n        type: \"Feature\",\n        properties: {\n          source: v.valid[e[0]],\n          target: v.valid[e[1]],\n          length: _distances[i],\n          urquhart: !!_urquart[i]\n        },\n        geometry: {\n          type: \"LineString\",\n          coordinates: [v.points[e[0]], v.points[e[1]]]\n        }\n      }))\n    };\n  };\n  v.mesh = function (data) {\n    if (data !== undefined) {\n      v(data);\n    }\n    if (!v.delaunay) return false;\n    return {\n      type: \"MultiLineString\",\n      coordinates: v.delaunay.edges.map(e => [v.points[e[0]], v.points[e[1]]])\n    };\n  };\n  v.cellMesh = function (data) {\n    if (data !== undefined) {\n      v(data);\n    }\n    if (!v.delaunay) return false;\n    const {\n      centers,\n      polygons\n    } = v.delaunay;\n    const coordinates = [];\n    for (const p of polygons) {\n      if (!p) continue;\n      for (let n = p.length, p0 = p[n - 1], p1 = p[0], i = 0; i < n; p0 = p1, p1 = p[++i]) {\n        if (p1 > p0) {\n          coordinates.push([centers[p0], centers[p1]]);\n        }\n      }\n    }\n    return {\n      type: \"MultiLineString\",\n      coordinates\n    };\n  };\n  v._found = undefined;\n  v.find = function (x, y, radius) {\n    v._found = v.delaunay.find(x, y, v._found);\n    if (!radius || geoDistance([x, y], v.points[v._found]) < radius) return v._found;\n  };\n  v.hull = function (data) {\n    if (data !== undefined) {\n      v(data);\n    }\n    const hull = v.delaunay.hull,\n      points = v.points;\n    return hull.length === 0 ? null : {\n      type: \"Polygon\",\n      coordinates: [[...hull.map(i => points[i]), points[hull[0]]]]\n    };\n  };\n  return data ? v(data) : v;\n}","map":{"version":3,"names":["geoCentroid","geoDistance","geoDelaunay","excess","geoVoronoi","data","v","delaunay","_data","type","features","temp","map","d","_vx","_vy","filter","isFinite","points","valid","x","f","y","polygons","undefined","coll","length","forEach","poly","i","push","geometry","coordinates","centers","properties","site","sitecoordinates","neighbours","neighbors","triangles","tri","index","center","circumcenter","links","_distances","edges","e","_urquart","urquhart","source","target","mesh","cellMesh","p","n","p0","p1","_found","find","radius","hull"],"sources":["/home/david/Documents/projects/works/sass/backend api key/frontend/node_modules/.pnpm/d3-geo-voronoi@2.1.0/node_modules/d3-geo-voronoi/src/voronoi.js"],"sourcesContent":["import { geoCentroid, geoDistance } from \"d3-geo\";\nimport { geoDelaunay, excess } from \"./delaunay.js\";\n\nexport function geoVoronoi(data) {\n  const v = function (data) {\n    v.delaunay = null;\n    v._data = data;\n\n    if (typeof v._data === \"object\" && v._data.type === \"FeatureCollection\") {\n      v._data = v._data.features;\n    }\n    if (typeof v._data === \"object\") {\n      const temp = v._data\n        .map((d) => [v._vx(d), v._vy(d), d])\n        .filter((d) => isFinite(d[0] + d[1]));\n      v.points = temp.map((d) => [d[0], d[1]]);\n      v.valid = temp.map((d) => d[2]);\n      v.delaunay = geoDelaunay(v.points);\n    }\n    return v;\n  };\n\n  v._vx = function (d) {\n    if (typeof d == \"object\" && \"type\" in d) {\n      return geoCentroid(d)[0];\n    }\n    if (0 in d) return d[0];\n  };\n  v._vy = function (d) {\n    if (typeof d == \"object\" && \"type\" in d) {\n      return geoCentroid(d)[1];\n    }\n    if (1 in d) return d[1];\n  };\n\n  v.x = function (f) {\n    if (!f) return v._vx;\n    v._vx = f;\n    return v;\n  };\n  v.y = function (f) {\n    if (!f) return v._vy;\n    v._vy = f;\n    return v;\n  };\n\n  v.polygons = function (data) {\n    if (data !== undefined) {\n      v(data);\n    }\n\n    if (!v.delaunay) return false;\n    const coll = {\n      type: \"FeatureCollection\",\n      features: [],\n    };\n    if (v.valid.length === 0) return coll;\n    v.delaunay.polygons.forEach((poly, i) =>\n      coll.features.push({\n        type: \"Feature\",\n        geometry: !poly\n          ? null\n          : {\n              type: \"Polygon\",\n              coordinates: [\n                [...poly, poly[0]].map((i) => v.delaunay.centers[i]),\n              ],\n            },\n        properties: {\n          site: v.valid[i],\n          sitecoordinates: v.points[i],\n          neighbours: v.delaunay.neighbors[i], // not part of the public API\n        },\n      })\n    );\n    if (v.valid.length === 1)\n      coll.features.push({\n        type: \"Feature\",\n        geometry: { type: \"Sphere\" },\n        properties: {\n          site: v.valid[0],\n          sitecoordinates: v.points[0],\n          neighbours: [],\n        },\n      });\n    return coll;\n  };\n\n  v.triangles = function (data) {\n    if (data !== undefined) {\n      v(data);\n    }\n    if (!v.delaunay) return false;\n\n    return {\n      type: \"FeatureCollection\",\n      features: v.delaunay.triangles\n        .map((tri, index) => {\n          tri = tri.map((i) => v.points[i]);\n          tri.center = v.delaunay.centers[index];\n          return tri;\n        })\n        .filter((tri) => excess(tri) > 0)\n        .map((tri) => ({\n          type: \"Feature\",\n          properties: {\n            circumcenter: tri.center,\n          },\n          geometry: {\n            type: \"Polygon\",\n            coordinates: [[...tri, tri[0]]],\n          },\n        })),\n    };\n  };\n\n  v.links = function (data) {\n    if (data !== undefined) {\n      v(data);\n    }\n    if (!v.delaunay) return false;\n    const _distances = v.delaunay.edges.map((e) =>\n        geoDistance(v.points[e[0]], v.points[e[1]])\n      ),\n      _urquart = v.delaunay.urquhart(_distances);\n    return {\n      type: \"FeatureCollection\",\n      features: v.delaunay.edges.map((e, i) => ({\n        type: \"Feature\",\n        properties: {\n          source: v.valid[e[0]],\n          target: v.valid[e[1]],\n          length: _distances[i],\n          urquhart: !!_urquart[i],\n        },\n        geometry: {\n          type: \"LineString\",\n          coordinates: [v.points[e[0]], v.points[e[1]]],\n        },\n      })),\n    };\n  };\n\n  v.mesh = function (data) {\n    if (data !== undefined) {\n      v(data);\n    }\n    if (!v.delaunay) return false;\n    return {\n      type: \"MultiLineString\",\n      coordinates: v.delaunay.edges.map((e) => [\n        v.points[e[0]],\n        v.points[e[1]],\n      ]),\n    };\n  };\n\n  v.cellMesh = function (data) {\n    if (data !== undefined) {\n      v(data);\n    }\n    if (!v.delaunay) return false;\n    const { centers, polygons } = v.delaunay;\n    const coordinates = [];\n    for (const p of polygons) {\n      if (!p) continue;\n      for (\n        let n = p.length, p0 = p[n - 1], p1 = p[0], i = 0;\n        i < n;\n        p0 = p1, p1 = p[++i]\n      ) {\n        if (p1 > p0) {\n          coordinates.push([centers[p0], centers[p1]]);\n        }\n      }\n    }\n    return {\n      type: \"MultiLineString\",\n      coordinates,\n    };\n  };\n\n  v._found = undefined;\n  v.find = function (x, y, radius) {\n    v._found = v.delaunay.find(x, y, v._found);\n    if (!radius || geoDistance([x, y], v.points[v._found]) < radius)\n      return v._found;\n  };\n\n  v.hull = function (data) {\n    if (data !== undefined) {\n      v(data);\n    }\n    const hull = v.delaunay.hull,\n      points = v.points;\n    return hull.length === 0\n      ? null\n      : {\n          type: \"Polygon\",\n          coordinates: [[...hull.map((i) => points[i]), points[hull[0]]]],\n        };\n  };\n\n  return data ? v(data) : v;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}