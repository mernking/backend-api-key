{"ast":null,"code":"var _jsxFileName = \"/home/david/Documents/projects/works/sass/backend api key/frontend/src/components/GlobeComponent.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from \"react\";\nimport * as THREE from \"three\";\nimport ThreeGlobe from \"three-globe\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction GlobeComponent({\n  logs\n}) {\n  _s();\n  const globeRef = useRef();\n  useEffect(() => {\n    if (!globeRef.current) return;\n\n    // === Setup Scene, Camera, Renderer ===\n    const scene = new THREE.Scene();\n    scene.background = new THREE.Color(0x000011);\n    const camera = new THREE.PerspectiveCamera(75, globeRef.current.clientWidth / globeRef.current.clientHeight, 0.1, 1000);\n    camera.position.z = 250;\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    renderer.setSize(globeRef.current.clientWidth, globeRef.current.clientHeight);\n    globeRef.current.appendChild(renderer.domElement);\n\n    // === Prepare Globe Data ===\n    const geoLogs = logs.filter(log => log.country && log.city);\n    const countryData = geoLogs.reduce((acc, log) => {\n      const country = log.country;\n      if (!acc[country]) {\n        acc[country] = {\n          name: country,\n          count: 0,\n          lat: 0,\n          lng: 0\n        };\n      }\n      acc[country].count += 1;\n      const coords = getApproximateCoords(country, log.city);\n      acc[country].lat = coords.lat;\n      acc[country].lng = coords.lng;\n      return acc;\n    }, {});\n    const countries = Object.values(countryData);\n\n    // === Create Globe Object ===\n    const globe = new ThreeGlobe().globeImageUrl(\"//unpkg.com/three-globe/example/img/earth-night.jpg\").pointsData(countries).pointLat(\"lat\").pointLng(\"lng\").pointColor(() => \"#ff6b6b\").pointAltitude(0.01).pointRadius(\"count\").pointsMerge(true).pointLabel(d => `\n        <div style=\"background: rgba(0,0,0,0.8); color: white; padding: 5px; border-radius: 3px;\">\n          <b>${d.name}</b><br/>\n          Requests: ${d.count}\n        </div>`);\n    scene.add(globe);\n\n    // === Lighting ===\n    scene.add(new THREE.AmbientLight(0xbbbbbb));\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.6);\n    directionalLight.position.set(1, 1, 1);\n    scene.add(directionalLight);\n\n    // === Controls (optional auto-rotation) ===\n    const controls = new THREE.OrbitControls(camera, renderer.domElement);\n    controls.enableZoom = true;\n    controls.autoRotate = true;\n    controls.autoRotateSpeed = 0.5;\n\n    // === Animation Loop ===\n    function animate() {\n      requestAnimationFrame(animate);\n      controls.update();\n      renderer.render(scene, camera);\n    }\n    animate();\n\n    // === Handle Resize ===\n    const handleResize = () => {\n      const width = globeRef.current.clientWidth;\n      const height = globeRef.current.clientHeight;\n      renderer.setSize(width, height);\n      camera.aspect = width / height;\n      camera.updateProjectionMatrix();\n    };\n    window.addEventListener(\"resize\", handleResize);\n\n    // === Cleanup ===\n    return () => {\n      window.removeEventListener(\"resize\", handleResize);\n      renderer.dispose();\n      globeRef.current.removeChild(renderer.domElement);\n    };\n  }, [logs]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: globeRef,\n    style: {\n      width: \"100%\",\n      height: \"100%\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 10\n  }, this);\n}\n\n// === Approximate Coordinates ===\n_s(GlobeComponent, \"RnDsAY9k2/HDGJbJqxvzVF3XlM4=\");\n_c = GlobeComponent;\nfunction getApproximateCoords(country) {\n  const coords = {\n    Nigeria: {\n      lat: 9.082,\n      lng: 8.6753\n    },\n    \"United States\": {\n      lat: 37.0902,\n      lng: -95.7129\n    },\n    \"United Kingdom\": {\n      lat: 55.3781,\n      lng: -3.436\n    },\n    Germany: {\n      lat: 51.1657,\n      lng: 10.4515\n    },\n    France: {\n      lat: 46.2276,\n      lng: 2.2137\n    },\n    Japan: {\n      lat: 36.2048,\n      lng: 138.2529\n    },\n    Australia: {\n      lat: -25.2744,\n      lng: 133.7751\n    },\n    Canada: {\n      lat: 56.1304,\n      lng: -106.3468\n    },\n    Brazil: {\n      lat: -14.235,\n      lng: -51.9253\n    },\n    India: {\n      lat: 20.5937,\n      lng: 78.9629\n    },\n    China: {\n      lat: 35.8617,\n      lng: 104.1954\n    },\n    Russia: {\n      lat: 61.524,\n      lng: 105.3188\n    },\n    \"South Africa\": {\n      lat: -30.5595,\n      lng: 22.9375\n    },\n    Mexico: {\n      lat: 23.6345,\n      lng: -102.5528\n    },\n    Argentina: {\n      lat: -38.4161,\n      lng: -63.6167\n    }\n  };\n  return coords[country] || {\n    lat: Math.random() * 180 - 90,\n    lng: Math.random() * 360 - 180\n  };\n}\nexport default GlobeComponent;\nvar _c;\n$RefreshReg$(_c, \"GlobeComponent\");","map":{"version":3,"names":["React","useEffect","useRef","THREE","ThreeGlobe","jsxDEV","_jsxDEV","GlobeComponent","logs","_s","globeRef","current","scene","Scene","background","Color","camera","PerspectiveCamera","clientWidth","clientHeight","position","z","renderer","WebGLRenderer","antialias","setSize","appendChild","domElement","geoLogs","filter","log","country","city","countryData","reduce","acc","name","count","lat","lng","coords","getApproximateCoords","countries","Object","values","globe","globeImageUrl","pointsData","pointLat","pointLng","pointColor","pointAltitude","pointRadius","pointsMerge","pointLabel","d","add","AmbientLight","directionalLight","DirectionalLight","set","controls","OrbitControls","enableZoom","autoRotate","autoRotateSpeed","animate","requestAnimationFrame","update","render","handleResize","width","height","aspect","updateProjectionMatrix","window","addEventListener","removeEventListener","dispose","removeChild","ref","style","fileName","_jsxFileName","lineNumber","columnNumber","_c","Nigeria","Germany","France","Japan","Australia","Canada","Brazil","India","China","Russia","Mexico","Argentina","Math","random","$RefreshReg$"],"sources":["/home/david/Documents/projects/works/sass/backend api key/frontend/src/components/GlobeComponent.js"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport * as THREE from \"three\";\nimport ThreeGlobe from \"three-globe\";\n\nfunction GlobeComponent({ logs }) {\n  const globeRef = useRef();\n\n  useEffect(() => {\n    if (!globeRef.current) return;\n\n    // === Setup Scene, Camera, Renderer ===\n    const scene = new THREE.Scene();\n    scene.background = new THREE.Color(0x000011);\n\n    const camera = new THREE.PerspectiveCamera(\n      75,\n      globeRef.current.clientWidth / globeRef.current.clientHeight,\n      0.1,\n      1000\n    );\n    camera.position.z = 250;\n\n    const renderer = new THREE.WebGLRenderer({ antialias: true });\n    renderer.setSize(\n      globeRef.current.clientWidth,\n      globeRef.current.clientHeight\n    );\n    globeRef.current.appendChild(renderer.domElement);\n\n    // === Prepare Globe Data ===\n    const geoLogs = logs.filter((log) => log.country && log.city);\n\n    const countryData = geoLogs.reduce((acc, log) => {\n      const country = log.country;\n      if (!acc[country]) {\n        acc[country] = { name: country, count: 0, lat: 0, lng: 0 };\n      }\n      acc[country].count += 1;\n      const coords = getApproximateCoords(country, log.city);\n      acc[country].lat = coords.lat;\n      acc[country].lng = coords.lng;\n      return acc;\n    }, {});\n\n    const countries = Object.values(countryData);\n\n    // === Create Globe Object ===\n    const globe = new ThreeGlobe()\n      .globeImageUrl(\"//unpkg.com/three-globe/example/img/earth-night.jpg\")\n      .pointsData(countries)\n      .pointLat(\"lat\")\n      .pointLng(\"lng\")\n      .pointColor(() => \"#ff6b6b\")\n      .pointAltitude(0.01)\n      .pointRadius(\"count\")\n      .pointsMerge(true)\n      .pointLabel(\n        (d) => `\n        <div style=\"background: rgba(0,0,0,0.8); color: white; padding: 5px; border-radius: 3px;\">\n          <b>${d.name}</b><br/>\n          Requests: ${d.count}\n        </div>`\n      );\n\n    scene.add(globe);\n\n    // === Lighting ===\n    scene.add(new THREE.AmbientLight(0xbbbbbb));\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.6);\n    directionalLight.position.set(1, 1, 1);\n    scene.add(directionalLight);\n\n    // === Controls (optional auto-rotation) ===\n    const controls = new THREE.OrbitControls(camera, renderer.domElement);\n    controls.enableZoom = true;\n    controls.autoRotate = true;\n    controls.autoRotateSpeed = 0.5;\n\n    // === Animation Loop ===\n    function animate() {\n      requestAnimationFrame(animate);\n      controls.update();\n      renderer.render(scene, camera);\n    }\n    animate();\n\n    // === Handle Resize ===\n    const handleResize = () => {\n      const width = globeRef.current.clientWidth;\n      const height = globeRef.current.clientHeight;\n      renderer.setSize(width, height);\n      camera.aspect = width / height;\n      camera.updateProjectionMatrix();\n    };\n    window.addEventListener(\"resize\", handleResize);\n\n    // === Cleanup ===\n    return () => {\n      window.removeEventListener(\"resize\", handleResize);\n      renderer.dispose();\n      globeRef.current.removeChild(renderer.domElement);\n    };\n  }, [logs]);\n\n  return <div ref={globeRef} style={{ width: \"100%\", height: \"100%\" }} />;\n}\n\n// === Approximate Coordinates ===\nfunction getApproximateCoords(country) {\n  const coords = {\n    Nigeria: { lat: 9.082, lng: 8.6753 },\n    \"United States\": { lat: 37.0902, lng: -95.7129 },\n    \"United Kingdom\": { lat: 55.3781, lng: -3.436 },\n    Germany: { lat: 51.1657, lng: 10.4515 },\n    France: { lat: 46.2276, lng: 2.2137 },\n    Japan: { lat: 36.2048, lng: 138.2529 },\n    Australia: { lat: -25.2744, lng: 133.7751 },\n    Canada: { lat: 56.1304, lng: -106.3468 },\n    Brazil: { lat: -14.235, lng: -51.9253 },\n    India: { lat: 20.5937, lng: 78.9629 },\n    China: { lat: 35.8617, lng: 104.1954 },\n    Russia: { lat: 61.524, lng: 105.3188 },\n    \"South Africa\": { lat: -30.5595, lng: 22.9375 },\n    Mexico: { lat: 23.6345, lng: -102.5528 },\n    Argentina: { lat: -38.4161, lng: -63.6167 },\n  };\n\n  return (\n    coords[country] || {\n      lat: Math.random() * 180 - 90,\n      lng: Math.random() * 360 - 180,\n    }\n  );\n}\n\nexport default GlobeComponent;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}