{"ast":null,"code":"import { ShaderLib, ShaderMaterial, UniformsLib, UniformsUtils, Vector2 } from 'three';\nUniformsLib.line = {\n  worldUnits: {\n    value: 1\n  },\n  linewidth: {\n    value: 1\n  },\n  resolution: {\n    value: new Vector2(1, 1)\n  },\n  dashOffset: {\n    value: 0\n  },\n  dashScale: {\n    value: 1\n  },\n  dashSize: {\n    value: 1\n  },\n  gapSize: {\n    value: 1\n  } // todo FIX - maybe change to totalSize\n};\nShaderLib['line'] = {\n  uniforms: UniformsUtils.merge([UniformsLib.common, UniformsLib.fog, UniformsLib.line]),\n  vertexShader: /* glsl */`\n\t\t#include <common>\n\t\t#include <color_pars_vertex>\n\t\t#include <fog_pars_vertex>\n\t\t#include <logdepthbuf_pars_vertex>\n\t\t#include <clipping_planes_pars_vertex>\n\n\t\tuniform float linewidth;\n\t\tuniform vec2 resolution;\n\n\t\tattribute vec3 instanceStart;\n\t\tattribute vec3 instanceEnd;\n\n\t\tattribute vec3 instanceColorStart;\n\t\tattribute vec3 instanceColorEnd;\n\n\t\t#ifdef WORLD_UNITS\n\n\t\t\tvarying vec4 worldPos;\n\t\t\tvarying vec3 worldStart;\n\t\t\tvarying vec3 worldEnd;\n\n\t\t\t#ifdef USE_DASH\n\n\t\t\t\tvarying vec2 vUv;\n\n\t\t\t#endif\n\n\t\t#else\n\n\t\t\tvarying vec2 vUv;\n\n\t\t#endif\n\n\t\t#ifdef USE_DASH\n\n\t\t\tuniform float dashScale;\n\t\t\tattribute float instanceDistanceStart;\n\t\t\tattribute float instanceDistanceEnd;\n\t\t\tvarying float vLineDistance;\n\n\t\t#endif\n\n\t\tvoid trimSegment( const in vec4 start, inout vec4 end ) {\n\n\t\t\t// trim end segment so it terminates between the camera plane and the near plane\n\n\t\t\t// conservative estimate of the near plane\n\t\t\tfloat a = projectionMatrix[ 2 ][ 2 ]; // 3nd entry in 3th column\n\t\t\tfloat b = projectionMatrix[ 3 ][ 2 ]; // 3nd entry in 4th column\n\t\t\tfloat nearEstimate = - 0.5 * b / a;\n\n\t\t\tfloat alpha = ( nearEstimate - start.z ) / ( end.z - start.z );\n\n\t\t\tend.xyz = mix( start.xyz, end.xyz, alpha );\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\t#ifdef USE_COLOR\n\n\t\t\t\tvColor.xyz = ( position.y < 0.5 ) ? instanceColorStart : instanceColorEnd;\n\n\t\t\t#endif\n\n\t\t\t#ifdef USE_DASH\n\n\t\t\t\tvLineDistance = ( position.y < 0.5 ) ? dashScale * instanceDistanceStart : dashScale * instanceDistanceEnd;\n\t\t\t\tvUv = uv;\n\n\t\t\t#endif\n\n\t\t\tfloat aspect = resolution.x / resolution.y;\n\n\t\t\t// camera space\n\t\t\tvec4 start = modelViewMatrix * vec4( instanceStart, 1.0 );\n\t\t\tvec4 end = modelViewMatrix * vec4( instanceEnd, 1.0 );\n\n\t\t\t#ifdef WORLD_UNITS\n\n\t\t\t\tworldStart = start.xyz;\n\t\t\t\tworldEnd = end.xyz;\n\n\t\t\t#else\n\n\t\t\t\tvUv = uv;\n\n\t\t\t#endif\n\n\t\t\t// special case for perspective projection, and segments that terminate either in, or behind, the camera plane\n\t\t\t// clearly the gpu firmware has a way of addressing this issue when projecting into ndc space\n\t\t\t// but we need to perform ndc-space calculations in the shader, so we must address this issue directly\n\t\t\t// perhaps there is a more elegant solution -- WestLangley\n\n\t\t\tbool perspective = ( projectionMatrix[ 2 ][ 3 ] == - 1.0 ); // 4th entry in the 3rd column\n\n\t\t\tif ( perspective ) {\n\n\t\t\t\tif ( start.z < 0.0 && end.z >= 0.0 ) {\n\n\t\t\t\t\ttrimSegment( start, end );\n\n\t\t\t\t} else if ( end.z < 0.0 && start.z >= 0.0 ) {\n\n\t\t\t\t\ttrimSegment( end, start );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// clip space\n\t\t\tvec4 clipStart = projectionMatrix * start;\n\t\t\tvec4 clipEnd = projectionMatrix * end;\n\n\t\t\t// ndc space\n\t\t\tvec3 ndcStart = clipStart.xyz / clipStart.w;\n\t\t\tvec3 ndcEnd = clipEnd.xyz / clipEnd.w;\n\n\t\t\t// direction\n\t\t\tvec2 dir = ndcEnd.xy - ndcStart.xy;\n\n\t\t\t// account for clip-space aspect ratio\n\t\t\tdir.x *= aspect;\n\t\t\tdir = normalize( dir );\n\n\t\t\t#ifdef WORLD_UNITS\n\n\t\t\t\tvec3 worldDir = normalize( end.xyz - start.xyz );\n\t\t\t\tvec3 tmpFwd = normalize( mix( start.xyz, end.xyz, 0.5 ) );\n\t\t\t\tvec3 worldUp = normalize( cross( worldDir, tmpFwd ) );\n\t\t\t\tvec3 worldFwd = cross( worldDir, worldUp );\n\t\t\t\tworldPos = position.y < 0.5 ? start: end;\n\n\t\t\t\t// height offset\n\t\t\t\tfloat hw = linewidth * 0.5;\n\t\t\t\tworldPos.xyz += position.x < 0.0 ? hw * worldUp : - hw * worldUp;\n\n\t\t\t\t// don't extend the line if we're rendering dashes because we\n\t\t\t\t// won't be rendering the endcaps\n\t\t\t\t#ifndef USE_DASH\n\n\t\t\t\t\t// cap extension\n\t\t\t\t\tworldPos.xyz += position.y < 0.5 ? - hw * worldDir : hw * worldDir;\n\n\t\t\t\t\t// add width to the box\n\t\t\t\t\tworldPos.xyz += worldFwd * hw;\n\n\t\t\t\t\t// endcaps\n\t\t\t\t\tif ( position.y > 1.0 || position.y < 0.0 ) {\n\n\t\t\t\t\t\tworldPos.xyz -= worldFwd * 2.0 * hw;\n\n\t\t\t\t\t}\n\n\t\t\t\t#endif\n\n\t\t\t\t// project the worldpos\n\t\t\t\tvec4 clip = projectionMatrix * worldPos;\n\n\t\t\t\t// shift the depth of the projected points so the line\n\t\t\t\t// segments overlap neatly\n\t\t\t\tvec3 clipPose = ( position.y < 0.5 ) ? ndcStart : ndcEnd;\n\t\t\t\tclip.z = clipPose.z * clip.w;\n\n\t\t\t#else\n\n\t\t\t\tvec2 offset = vec2( dir.y, - dir.x );\n\t\t\t\t// undo aspect ratio adjustment\n\t\t\t\tdir.x /= aspect;\n\t\t\t\toffset.x /= aspect;\n\n\t\t\t\t// sign flip\n\t\t\t\tif ( position.x < 0.0 ) offset *= - 1.0;\n\n\t\t\t\t// endcaps\n\t\t\t\tif ( position.y < 0.0 ) {\n\n\t\t\t\t\toffset += - dir;\n\n\t\t\t\t} else if ( position.y > 1.0 ) {\n\n\t\t\t\t\toffset += dir;\n\n\t\t\t\t}\n\n\t\t\t\t// adjust for linewidth\n\t\t\t\toffset *= linewidth;\n\n\t\t\t\t// adjust for clip-space to screen-space conversion // maybe resolution should be based on viewport ...\n\t\t\t\toffset /= resolution.y;\n\n\t\t\t\t// select end\n\t\t\t\tvec4 clip = ( position.y < 0.5 ) ? clipStart : clipEnd;\n\n\t\t\t\t// back to clip space\n\t\t\t\toffset *= clip.w;\n\n\t\t\t\tclip.xy += offset;\n\n\t\t\t#endif\n\n\t\t\tgl_Position = clip;\n\n\t\t\tvec4 mvPosition = ( position.y < 0.5 ) ? start : end; // this is an approximation\n\n\t\t\t#include <logdepthbuf_vertex>\n\t\t\t#include <clipping_planes_vertex>\n\t\t\t#include <fog_vertex>\n\n\t\t}\n\t\t`,\n  fragmentShader: /* glsl */`\n\t\tuniform vec3 diffuse;\n\t\tuniform float opacity;\n\t\tuniform float linewidth;\n\n\t\t#ifdef USE_DASH\n\n\t\t\tuniform float dashOffset;\n\t\t\tuniform float dashSize;\n\t\t\tuniform float gapSize;\n\n\t\t#endif\n\n\t\tvarying float vLineDistance;\n\n\t\t#ifdef WORLD_UNITS\n\n\t\t\tvarying vec4 worldPos;\n\t\t\tvarying vec3 worldStart;\n\t\t\tvarying vec3 worldEnd;\n\n\t\t\t#ifdef USE_DASH\n\n\t\t\t\tvarying vec2 vUv;\n\n\t\t\t#endif\n\n\t\t#else\n\n\t\t\tvarying vec2 vUv;\n\n\t\t#endif\n\n\t\t#include <common>\n\t\t#include <color_pars_fragment>\n\t\t#include <fog_pars_fragment>\n\t\t#include <logdepthbuf_pars_fragment>\n\t\t#include <clipping_planes_pars_fragment>\n\n\t\tvec2 closestLineToLine(vec3 p1, vec3 p2, vec3 p3, vec3 p4) {\n\n\t\t\tfloat mua;\n\t\t\tfloat mub;\n\n\t\t\tvec3 p13 = p1 - p3;\n\t\t\tvec3 p43 = p4 - p3;\n\n\t\t\tvec3 p21 = p2 - p1;\n\n\t\t\tfloat d1343 = dot( p13, p43 );\n\t\t\tfloat d4321 = dot( p43, p21 );\n\t\t\tfloat d1321 = dot( p13, p21 );\n\t\t\tfloat d4343 = dot( p43, p43 );\n\t\t\tfloat d2121 = dot( p21, p21 );\n\n\t\t\tfloat denom = d2121 * d4343 - d4321 * d4321;\n\n\t\t\tfloat numer = d1343 * d4321 - d1321 * d4343;\n\n\t\t\tmua = numer / denom;\n\t\t\tmua = clamp( mua, 0.0, 1.0 );\n\t\t\tmub = ( d1343 + d4321 * ( mua ) ) / d4343;\n\t\t\tmub = clamp( mub, 0.0, 1.0 );\n\n\t\t\treturn vec2( mua, mub );\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\tfloat alpha = opacity;\n\t\t\tvec4 diffuseColor = vec4( diffuse, alpha );\n\n\t\t\t#include <clipping_planes_fragment>\n\n\t\t\t#ifdef USE_DASH\n\n\t\t\t\tif ( vUv.y < - 1.0 || vUv.y > 1.0 ) discard; // discard endcaps\n\n\t\t\t\tif ( mod( vLineDistance + dashOffset, dashSize + gapSize ) > dashSize ) discard; // todo - FIX\n\n\t\t\t#endif\n\n\t\t\t#ifdef WORLD_UNITS\n\n\t\t\t\t// Find the closest points on the view ray and the line segment\n\t\t\t\tvec3 rayEnd = normalize( worldPos.xyz ) * 1e5;\n\t\t\t\tvec3 lineDir = worldEnd - worldStart;\n\t\t\t\tvec2 params = closestLineToLine( worldStart, worldEnd, vec3( 0.0, 0.0, 0.0 ), rayEnd );\n\n\t\t\t\tvec3 p1 = worldStart + lineDir * params.x;\n\t\t\t\tvec3 p2 = rayEnd * params.y;\n\t\t\t\tvec3 delta = p1 - p2;\n\t\t\t\tfloat len = length( delta );\n\t\t\t\tfloat norm = len / linewidth;\n\n\t\t\t\t#ifndef USE_DASH\n\n\t\t\t\t\t#ifdef USE_ALPHA_TO_COVERAGE\n\n\t\t\t\t\t\tfloat dnorm = fwidth( norm );\n\t\t\t\t\t\talpha = 1.0 - smoothstep( 0.5 - dnorm, 0.5 + dnorm, norm );\n\n\t\t\t\t\t#else\n\n\t\t\t\t\t\tif ( norm > 0.5 ) {\n\n\t\t\t\t\t\t\tdiscard;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t#endif\n\n\t\t\t\t#endif\n\n\t\t\t#else\n\n\t\t\t\t#ifdef USE_ALPHA_TO_COVERAGE\n\n\t\t\t\t\t// artifacts appear on some hardware if a derivative is taken within a conditional\n\t\t\t\t\tfloat a = vUv.x;\n\t\t\t\t\tfloat b = ( vUv.y > 0.0 ) ? vUv.y - 1.0 : vUv.y + 1.0;\n\t\t\t\t\tfloat len2 = a * a + b * b;\n\t\t\t\t\tfloat dlen = fwidth( len2 );\n\n\t\t\t\t\tif ( abs( vUv.y ) > 1.0 ) {\n\n\t\t\t\t\t\talpha = 1.0 - smoothstep( 1.0 - dlen, 1.0 + dlen, len2 );\n\n\t\t\t\t\t}\n\n\t\t\t\t#else\n\n\t\t\t\t\tif ( abs( vUv.y ) > 1.0 ) {\n\n\t\t\t\t\t\tfloat a = vUv.x;\n\t\t\t\t\t\tfloat b = ( vUv.y > 0.0 ) ? vUv.y - 1.0 : vUv.y + 1.0;\n\t\t\t\t\t\tfloat len2 = a * a + b * b;\n\n\t\t\t\t\t\tif ( len2 > 1.0 ) discard;\n\n\t\t\t\t\t}\n\n\t\t\t\t#endif\n\n\t\t\t#endif\n\n\t\t\t#include <logdepthbuf_fragment>\n\t\t\t#include <color_fragment>\n\n\t\t\tgl_FragColor = vec4( diffuseColor.rgb, alpha );\n\n\t\t\t#include <tonemapping_fragment>\n\t\t\t#include <colorspace_fragment>\n\t\t\t#include <fog_fragment>\n\t\t\t#include <premultiplied_alpha_fragment>\n\n\t\t}\n\t\t`\n};\n\n/**\n * A material for drawing wireframe-style geometries.\n *\n * Unlike {@link LineBasicMaterial}, it supports arbitrary line widths and allows using world units\n * instead of screen space units. This material is used with {@link LineSegments2} and {@link Line2}.\n *\n * This module can only be used with {@link WebGLRenderer}. When using {@link WebGPURenderer},\n * use {@link Line2NodeMaterial}.\n *\n * @augments ShaderMaterial\n * @three_import import { LineMaterial } from 'three/addons/lines/LineMaterial.js';\n */\nclass LineMaterial extends ShaderMaterial {\n  /**\n   * Constructs a new line segments geometry.\n   *\n   * @param {Object} [parameters] - An object with one or more properties\n   * defining the material's appearance. Any property of the material\n   * (including any property from inherited materials) can be passed\n   * in here. Color values can be passed any type of value accepted\n   * by {@link Color#set}.\n   */\n  constructor(parameters) {\n    super({\n      type: 'LineMaterial',\n      uniforms: UniformsUtils.clone(ShaderLib['line'].uniforms),\n      vertexShader: ShaderLib['line'].vertexShader,\n      fragmentShader: ShaderLib['line'].fragmentShader,\n      clipping: true // required for clipping support\n    });\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isLineMaterial = true;\n    this.setValues(parameters);\n  }\n\n  /**\n   * The material's color.\n   *\n   * @type {Color}\n   * @default (1,1,1)\n   */\n  get color() {\n    return this.uniforms.diffuse.value;\n  }\n  set color(value) {\n    this.uniforms.diffuse.value = value;\n  }\n\n  /**\n   * Whether the material's sizes (width, dash gaps) are in world units.\n   *\n   * @type {boolean}\n   * @default false\n   */\n  get worldUnits() {\n    return 'WORLD_UNITS' in this.defines;\n  }\n  set worldUnits(value) {\n    if (value === true) {\n      this.defines.WORLD_UNITS = '';\n    } else {\n      delete this.defines.WORLD_UNITS;\n    }\n  }\n\n  /**\n   * Controls line thickness in CSS pixel units when `worldUnits` is `false` (default),\n   * or in world units when `worldUnits` is `true`.\n   *\n   * @type {number}\n   * @default 1\n   */\n  get linewidth() {\n    return this.uniforms.linewidth.value;\n  }\n  set linewidth(value) {\n    if (!this.uniforms.linewidth) return;\n    this.uniforms.linewidth.value = value;\n  }\n\n  /**\n   * Whether the line is dashed, or solid.\n   *\n   * @type {boolean}\n   * @default false\n   */\n  get dashed() {\n    return 'USE_DASH' in this.defines;\n  }\n  set dashed(value) {\n    if (value === true !== this.dashed) {\n      this.needsUpdate = true;\n    }\n    if (value === true) {\n      this.defines.USE_DASH = '';\n    } else {\n      delete this.defines.USE_DASH;\n    }\n  }\n\n  /**\n   * The scale of the dashes and gaps.\n   *\n   * @type {number}\n   * @default 1\n   */\n  get dashScale() {\n    return this.uniforms.dashScale.value;\n  }\n  set dashScale(value) {\n    this.uniforms.dashScale.value = value;\n  }\n\n  /**\n   * The size of the dash.\n   *\n   * @type {number}\n   * @default 1\n   */\n  get dashSize() {\n    return this.uniforms.dashSize.value;\n  }\n  set dashSize(value) {\n    this.uniforms.dashSize.value = value;\n  }\n\n  /**\n   * Where in the dash cycle the dash starts.\n   *\n   * @type {number}\n   * @default 0\n   */\n  get dashOffset() {\n    return this.uniforms.dashOffset.value;\n  }\n  set dashOffset(value) {\n    this.uniforms.dashOffset.value = value;\n  }\n\n  /**\n   * The size of the gap.\n   *\n   * @type {number}\n   * @default 0\n   */\n  get gapSize() {\n    return this.uniforms.gapSize.value;\n  }\n  set gapSize(value) {\n    this.uniforms.gapSize.value = value;\n  }\n\n  /**\n   * The opacity.\n   *\n   * @type {number}\n   * @default 1\n   */\n  get opacity() {\n    return this.uniforms.opacity.value;\n  }\n  set opacity(value) {\n    if (!this.uniforms) return;\n    this.uniforms.opacity.value = value;\n  }\n\n  /**\n   * The size of the viewport, in screen pixels. This must be kept updated to make\n   * screen-space rendering accurate.The `LineSegments2.onBeforeRender` callback\n   * performs the update for visible objects.\n   *\n   * @type {Vector2}\n   */\n  get resolution() {\n    return this.uniforms.resolution.value;\n  }\n  set resolution(value) {\n    this.uniforms.resolution.value.copy(value);\n  }\n\n  /**\n   * Whether to use alphaToCoverage or not. When enabled, this can improve the\n   * anti-aliasing of line edges when using MSAA.\n   *\n   * @type {boolean}\n   */\n  get alphaToCoverage() {\n    return 'USE_ALPHA_TO_COVERAGE' in this.defines;\n  }\n  set alphaToCoverage(value) {\n    if (!this.defines) return;\n    if (value === true !== this.alphaToCoverage) {\n      this.needsUpdate = true;\n    }\n    if (value === true) {\n      this.defines.USE_ALPHA_TO_COVERAGE = '';\n    } else {\n      delete this.defines.USE_ALPHA_TO_COVERAGE;\n    }\n  }\n}\nexport { LineMaterial };","map":{"version":3,"names":["ShaderLib","ShaderMaterial","UniformsLib","UniformsUtils","Vector2","line","worldUnits","value","linewidth","resolution","dashOffset","dashScale","dashSize","gapSize","uniforms","merge","common","fog","vertexShader","fragmentShader","LineMaterial","constructor","parameters","type","clone","clipping","isLineMaterial","setValues","color","diffuse","defines","WORLD_UNITS","dashed","needsUpdate","USE_DASH","opacity","copy","alphaToCoverage","USE_ALPHA_TO_COVERAGE"],"sources":["/home/david/Documents/projects/works/sass/backend api key/frontend/node_modules/.pnpm/three@0.180.0/node_modules/three/examples/jsm/lines/LineMaterial.js"],"sourcesContent":["import {\n\tShaderLib,\n\tShaderMaterial,\n\tUniformsLib,\n\tUniformsUtils,\n\tVector2,\n} from 'three';\n\nUniformsLib.line = {\n\n\tworldUnits: { value: 1 },\n\tlinewidth: { value: 1 },\n\tresolution: { value: new Vector2( 1, 1 ) },\n\tdashOffset: { value: 0 },\n\tdashScale: { value: 1 },\n\tdashSize: { value: 1 },\n\tgapSize: { value: 1 } // todo FIX - maybe change to totalSize\n\n};\n\nShaderLib[ 'line' ] = {\n\n\tuniforms: UniformsUtils.merge( [\n\t\tUniformsLib.common,\n\t\tUniformsLib.fog,\n\t\tUniformsLib.line\n\t] ),\n\n\tvertexShader:\n\t/* glsl */`\n\t\t#include <common>\n\t\t#include <color_pars_vertex>\n\t\t#include <fog_pars_vertex>\n\t\t#include <logdepthbuf_pars_vertex>\n\t\t#include <clipping_planes_pars_vertex>\n\n\t\tuniform float linewidth;\n\t\tuniform vec2 resolution;\n\n\t\tattribute vec3 instanceStart;\n\t\tattribute vec3 instanceEnd;\n\n\t\tattribute vec3 instanceColorStart;\n\t\tattribute vec3 instanceColorEnd;\n\n\t\t#ifdef WORLD_UNITS\n\n\t\t\tvarying vec4 worldPos;\n\t\t\tvarying vec3 worldStart;\n\t\t\tvarying vec3 worldEnd;\n\n\t\t\t#ifdef USE_DASH\n\n\t\t\t\tvarying vec2 vUv;\n\n\t\t\t#endif\n\n\t\t#else\n\n\t\t\tvarying vec2 vUv;\n\n\t\t#endif\n\n\t\t#ifdef USE_DASH\n\n\t\t\tuniform float dashScale;\n\t\t\tattribute float instanceDistanceStart;\n\t\t\tattribute float instanceDistanceEnd;\n\t\t\tvarying float vLineDistance;\n\n\t\t#endif\n\n\t\tvoid trimSegment( const in vec4 start, inout vec4 end ) {\n\n\t\t\t// trim end segment so it terminates between the camera plane and the near plane\n\n\t\t\t// conservative estimate of the near plane\n\t\t\tfloat a = projectionMatrix[ 2 ][ 2 ]; // 3nd entry in 3th column\n\t\t\tfloat b = projectionMatrix[ 3 ][ 2 ]; // 3nd entry in 4th column\n\t\t\tfloat nearEstimate = - 0.5 * b / a;\n\n\t\t\tfloat alpha = ( nearEstimate - start.z ) / ( end.z - start.z );\n\n\t\t\tend.xyz = mix( start.xyz, end.xyz, alpha );\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\t#ifdef USE_COLOR\n\n\t\t\t\tvColor.xyz = ( position.y < 0.5 ) ? instanceColorStart : instanceColorEnd;\n\n\t\t\t#endif\n\n\t\t\t#ifdef USE_DASH\n\n\t\t\t\tvLineDistance = ( position.y < 0.5 ) ? dashScale * instanceDistanceStart : dashScale * instanceDistanceEnd;\n\t\t\t\tvUv = uv;\n\n\t\t\t#endif\n\n\t\t\tfloat aspect = resolution.x / resolution.y;\n\n\t\t\t// camera space\n\t\t\tvec4 start = modelViewMatrix * vec4( instanceStart, 1.0 );\n\t\t\tvec4 end = modelViewMatrix * vec4( instanceEnd, 1.0 );\n\n\t\t\t#ifdef WORLD_UNITS\n\n\t\t\t\tworldStart = start.xyz;\n\t\t\t\tworldEnd = end.xyz;\n\n\t\t\t#else\n\n\t\t\t\tvUv = uv;\n\n\t\t\t#endif\n\n\t\t\t// special case for perspective projection, and segments that terminate either in, or behind, the camera plane\n\t\t\t// clearly the gpu firmware has a way of addressing this issue when projecting into ndc space\n\t\t\t// but we need to perform ndc-space calculations in the shader, so we must address this issue directly\n\t\t\t// perhaps there is a more elegant solution -- WestLangley\n\n\t\t\tbool perspective = ( projectionMatrix[ 2 ][ 3 ] == - 1.0 ); // 4th entry in the 3rd column\n\n\t\t\tif ( perspective ) {\n\n\t\t\t\tif ( start.z < 0.0 && end.z >= 0.0 ) {\n\n\t\t\t\t\ttrimSegment( start, end );\n\n\t\t\t\t} else if ( end.z < 0.0 && start.z >= 0.0 ) {\n\n\t\t\t\t\ttrimSegment( end, start );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// clip space\n\t\t\tvec4 clipStart = projectionMatrix * start;\n\t\t\tvec4 clipEnd = projectionMatrix * end;\n\n\t\t\t// ndc space\n\t\t\tvec3 ndcStart = clipStart.xyz / clipStart.w;\n\t\t\tvec3 ndcEnd = clipEnd.xyz / clipEnd.w;\n\n\t\t\t// direction\n\t\t\tvec2 dir = ndcEnd.xy - ndcStart.xy;\n\n\t\t\t// account for clip-space aspect ratio\n\t\t\tdir.x *= aspect;\n\t\t\tdir = normalize( dir );\n\n\t\t\t#ifdef WORLD_UNITS\n\n\t\t\t\tvec3 worldDir = normalize( end.xyz - start.xyz );\n\t\t\t\tvec3 tmpFwd = normalize( mix( start.xyz, end.xyz, 0.5 ) );\n\t\t\t\tvec3 worldUp = normalize( cross( worldDir, tmpFwd ) );\n\t\t\t\tvec3 worldFwd = cross( worldDir, worldUp );\n\t\t\t\tworldPos = position.y < 0.5 ? start: end;\n\n\t\t\t\t// height offset\n\t\t\t\tfloat hw = linewidth * 0.5;\n\t\t\t\tworldPos.xyz += position.x < 0.0 ? hw * worldUp : - hw * worldUp;\n\n\t\t\t\t// don't extend the line if we're rendering dashes because we\n\t\t\t\t// won't be rendering the endcaps\n\t\t\t\t#ifndef USE_DASH\n\n\t\t\t\t\t// cap extension\n\t\t\t\t\tworldPos.xyz += position.y < 0.5 ? - hw * worldDir : hw * worldDir;\n\n\t\t\t\t\t// add width to the box\n\t\t\t\t\tworldPos.xyz += worldFwd * hw;\n\n\t\t\t\t\t// endcaps\n\t\t\t\t\tif ( position.y > 1.0 || position.y < 0.0 ) {\n\n\t\t\t\t\t\tworldPos.xyz -= worldFwd * 2.0 * hw;\n\n\t\t\t\t\t}\n\n\t\t\t\t#endif\n\n\t\t\t\t// project the worldpos\n\t\t\t\tvec4 clip = projectionMatrix * worldPos;\n\n\t\t\t\t// shift the depth of the projected points so the line\n\t\t\t\t// segments overlap neatly\n\t\t\t\tvec3 clipPose = ( position.y < 0.5 ) ? ndcStart : ndcEnd;\n\t\t\t\tclip.z = clipPose.z * clip.w;\n\n\t\t\t#else\n\n\t\t\t\tvec2 offset = vec2( dir.y, - dir.x );\n\t\t\t\t// undo aspect ratio adjustment\n\t\t\t\tdir.x /= aspect;\n\t\t\t\toffset.x /= aspect;\n\n\t\t\t\t// sign flip\n\t\t\t\tif ( position.x < 0.0 ) offset *= - 1.0;\n\n\t\t\t\t// endcaps\n\t\t\t\tif ( position.y < 0.0 ) {\n\n\t\t\t\t\toffset += - dir;\n\n\t\t\t\t} else if ( position.y > 1.0 ) {\n\n\t\t\t\t\toffset += dir;\n\n\t\t\t\t}\n\n\t\t\t\t// adjust for linewidth\n\t\t\t\toffset *= linewidth;\n\n\t\t\t\t// adjust for clip-space to screen-space conversion // maybe resolution should be based on viewport ...\n\t\t\t\toffset /= resolution.y;\n\n\t\t\t\t// select end\n\t\t\t\tvec4 clip = ( position.y < 0.5 ) ? clipStart : clipEnd;\n\n\t\t\t\t// back to clip space\n\t\t\t\toffset *= clip.w;\n\n\t\t\t\tclip.xy += offset;\n\n\t\t\t#endif\n\n\t\t\tgl_Position = clip;\n\n\t\t\tvec4 mvPosition = ( position.y < 0.5 ) ? start : end; // this is an approximation\n\n\t\t\t#include <logdepthbuf_vertex>\n\t\t\t#include <clipping_planes_vertex>\n\t\t\t#include <fog_vertex>\n\n\t\t}\n\t\t`,\n\n\tfragmentShader:\n\t/* glsl */`\n\t\tuniform vec3 diffuse;\n\t\tuniform float opacity;\n\t\tuniform float linewidth;\n\n\t\t#ifdef USE_DASH\n\n\t\t\tuniform float dashOffset;\n\t\t\tuniform float dashSize;\n\t\t\tuniform float gapSize;\n\n\t\t#endif\n\n\t\tvarying float vLineDistance;\n\n\t\t#ifdef WORLD_UNITS\n\n\t\t\tvarying vec4 worldPos;\n\t\t\tvarying vec3 worldStart;\n\t\t\tvarying vec3 worldEnd;\n\n\t\t\t#ifdef USE_DASH\n\n\t\t\t\tvarying vec2 vUv;\n\n\t\t\t#endif\n\n\t\t#else\n\n\t\t\tvarying vec2 vUv;\n\n\t\t#endif\n\n\t\t#include <common>\n\t\t#include <color_pars_fragment>\n\t\t#include <fog_pars_fragment>\n\t\t#include <logdepthbuf_pars_fragment>\n\t\t#include <clipping_planes_pars_fragment>\n\n\t\tvec2 closestLineToLine(vec3 p1, vec3 p2, vec3 p3, vec3 p4) {\n\n\t\t\tfloat mua;\n\t\t\tfloat mub;\n\n\t\t\tvec3 p13 = p1 - p3;\n\t\t\tvec3 p43 = p4 - p3;\n\n\t\t\tvec3 p21 = p2 - p1;\n\n\t\t\tfloat d1343 = dot( p13, p43 );\n\t\t\tfloat d4321 = dot( p43, p21 );\n\t\t\tfloat d1321 = dot( p13, p21 );\n\t\t\tfloat d4343 = dot( p43, p43 );\n\t\t\tfloat d2121 = dot( p21, p21 );\n\n\t\t\tfloat denom = d2121 * d4343 - d4321 * d4321;\n\n\t\t\tfloat numer = d1343 * d4321 - d1321 * d4343;\n\n\t\t\tmua = numer / denom;\n\t\t\tmua = clamp( mua, 0.0, 1.0 );\n\t\t\tmub = ( d1343 + d4321 * ( mua ) ) / d4343;\n\t\t\tmub = clamp( mub, 0.0, 1.0 );\n\n\t\t\treturn vec2( mua, mub );\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\tfloat alpha = opacity;\n\t\t\tvec4 diffuseColor = vec4( diffuse, alpha );\n\n\t\t\t#include <clipping_planes_fragment>\n\n\t\t\t#ifdef USE_DASH\n\n\t\t\t\tif ( vUv.y < - 1.0 || vUv.y > 1.0 ) discard; // discard endcaps\n\n\t\t\t\tif ( mod( vLineDistance + dashOffset, dashSize + gapSize ) > dashSize ) discard; // todo - FIX\n\n\t\t\t#endif\n\n\t\t\t#ifdef WORLD_UNITS\n\n\t\t\t\t// Find the closest points on the view ray and the line segment\n\t\t\t\tvec3 rayEnd = normalize( worldPos.xyz ) * 1e5;\n\t\t\t\tvec3 lineDir = worldEnd - worldStart;\n\t\t\t\tvec2 params = closestLineToLine( worldStart, worldEnd, vec3( 0.0, 0.0, 0.0 ), rayEnd );\n\n\t\t\t\tvec3 p1 = worldStart + lineDir * params.x;\n\t\t\t\tvec3 p2 = rayEnd * params.y;\n\t\t\t\tvec3 delta = p1 - p2;\n\t\t\t\tfloat len = length( delta );\n\t\t\t\tfloat norm = len / linewidth;\n\n\t\t\t\t#ifndef USE_DASH\n\n\t\t\t\t\t#ifdef USE_ALPHA_TO_COVERAGE\n\n\t\t\t\t\t\tfloat dnorm = fwidth( norm );\n\t\t\t\t\t\talpha = 1.0 - smoothstep( 0.5 - dnorm, 0.5 + dnorm, norm );\n\n\t\t\t\t\t#else\n\n\t\t\t\t\t\tif ( norm > 0.5 ) {\n\n\t\t\t\t\t\t\tdiscard;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t#endif\n\n\t\t\t\t#endif\n\n\t\t\t#else\n\n\t\t\t\t#ifdef USE_ALPHA_TO_COVERAGE\n\n\t\t\t\t\t// artifacts appear on some hardware if a derivative is taken within a conditional\n\t\t\t\t\tfloat a = vUv.x;\n\t\t\t\t\tfloat b = ( vUv.y > 0.0 ) ? vUv.y - 1.0 : vUv.y + 1.0;\n\t\t\t\t\tfloat len2 = a * a + b * b;\n\t\t\t\t\tfloat dlen = fwidth( len2 );\n\n\t\t\t\t\tif ( abs( vUv.y ) > 1.0 ) {\n\n\t\t\t\t\t\talpha = 1.0 - smoothstep( 1.0 - dlen, 1.0 + dlen, len2 );\n\n\t\t\t\t\t}\n\n\t\t\t\t#else\n\n\t\t\t\t\tif ( abs( vUv.y ) > 1.0 ) {\n\n\t\t\t\t\t\tfloat a = vUv.x;\n\t\t\t\t\t\tfloat b = ( vUv.y > 0.0 ) ? vUv.y - 1.0 : vUv.y + 1.0;\n\t\t\t\t\t\tfloat len2 = a * a + b * b;\n\n\t\t\t\t\t\tif ( len2 > 1.0 ) discard;\n\n\t\t\t\t\t}\n\n\t\t\t\t#endif\n\n\t\t\t#endif\n\n\t\t\t#include <logdepthbuf_fragment>\n\t\t\t#include <color_fragment>\n\n\t\t\tgl_FragColor = vec4( diffuseColor.rgb, alpha );\n\n\t\t\t#include <tonemapping_fragment>\n\t\t\t#include <colorspace_fragment>\n\t\t\t#include <fog_fragment>\n\t\t\t#include <premultiplied_alpha_fragment>\n\n\t\t}\n\t\t`\n};\n\n/**\n * A material for drawing wireframe-style geometries.\n *\n * Unlike {@link LineBasicMaterial}, it supports arbitrary line widths and allows using world units\n * instead of screen space units. This material is used with {@link LineSegments2} and {@link Line2}.\n *\n * This module can only be used with {@link WebGLRenderer}. When using {@link WebGPURenderer},\n * use {@link Line2NodeMaterial}.\n *\n * @augments ShaderMaterial\n * @three_import import { LineMaterial } from 'three/addons/lines/LineMaterial.js';\n */\nclass LineMaterial extends ShaderMaterial {\n\n\t/**\n\t * Constructs a new line segments geometry.\n\t *\n\t * @param {Object} [parameters] - An object with one or more properties\n\t * defining the material's appearance. Any property of the material\n\t * (including any property from inherited materials) can be passed\n\t * in here. Color values can be passed any type of value accepted\n\t * by {@link Color#set}.\n\t */\n\tconstructor( parameters ) {\n\n\t\tsuper( {\n\n\t\t\ttype: 'LineMaterial',\n\t\t\tuniforms: UniformsUtils.clone( ShaderLib[ 'line' ].uniforms ),\n\n\t\t\tvertexShader: ShaderLib[ 'line' ].vertexShader,\n\t\t\tfragmentShader: ShaderLib[ 'line' ].fragmentShader,\n\n\t\t\tclipping: true // required for clipping support\n\n\t\t} );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isLineMaterial = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\t/**\n\t * The material's color.\n\t *\n\t * @type {Color}\n\t * @default (1,1,1)\n\t */\n\tget color() {\n\n\t\treturn this.uniforms.diffuse.value;\n\n\t}\n\n\tset color( value ) {\n\n\t\tthis.uniforms.diffuse.value = value;\n\n\t}\n\n\t/**\n\t * Whether the material's sizes (width, dash gaps) are in world units.\n\t *\n\t * @type {boolean}\n\t * @default false\n\t */\n\tget worldUnits() {\n\n\t\treturn 'WORLD_UNITS' in this.defines;\n\n\t}\n\n\tset worldUnits( value ) {\n\n\t\tif ( value === true ) {\n\n\t\t\tthis.defines.WORLD_UNITS = '';\n\n\t\t} else {\n\n\t\t\tdelete this.defines.WORLD_UNITS;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Controls line thickness in CSS pixel units when `worldUnits` is `false` (default),\n\t * or in world units when `worldUnits` is `true`.\n\t *\n\t * @type {number}\n\t * @default 1\n\t */\n\tget linewidth() {\n\n\t\treturn this.uniforms.linewidth.value;\n\n\t}\n\n\tset linewidth( value ) {\n\n\t\tif ( ! this.uniforms.linewidth ) return;\n\t\tthis.uniforms.linewidth.value = value;\n\n\t}\n\n\t/**\n\t * Whether the line is dashed, or solid.\n\t *\n\t * @type {boolean}\n\t * @default false\n\t */\n\tget dashed() {\n\n\t\treturn 'USE_DASH' in this.defines;\n\n\t}\n\n\tset dashed( value ) {\n\n\t\tif ( ( value === true ) !== this.dashed ) {\n\n\t\t\tthis.needsUpdate = true;\n\n\t\t}\n\n\t\tif ( value === true ) {\n\n\t\t\tthis.defines.USE_DASH = '';\n\n\t\t} else {\n\n\t\t\tdelete this.defines.USE_DASH;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * The scale of the dashes and gaps.\n\t *\n\t * @type {number}\n\t * @default 1\n\t */\n\tget dashScale() {\n\n\t\treturn this.uniforms.dashScale.value;\n\n\t}\n\n\tset dashScale( value ) {\n\n\t\tthis.uniforms.dashScale.value = value;\n\n\t}\n\n\t/**\n\t * The size of the dash.\n\t *\n\t * @type {number}\n\t * @default 1\n\t */\n\tget dashSize() {\n\n\t\treturn this.uniforms.dashSize.value;\n\n\t}\n\n\tset dashSize( value ) {\n\n\t\tthis.uniforms.dashSize.value = value;\n\n\t}\n\n\t/**\n\t * Where in the dash cycle the dash starts.\n\t *\n\t * @type {number}\n\t * @default 0\n\t */\n\tget dashOffset() {\n\n\t\treturn this.uniforms.dashOffset.value;\n\n\t}\n\n\tset dashOffset( value ) {\n\n\t\tthis.uniforms.dashOffset.value = value;\n\n\t}\n\n\t/**\n\t * The size of the gap.\n\t *\n\t * @type {number}\n\t * @default 0\n\t */\n\tget gapSize() {\n\n\t\treturn this.uniforms.gapSize.value;\n\n\t}\n\n\tset gapSize( value ) {\n\n\t\tthis.uniforms.gapSize.value = value;\n\n\t}\n\n\t/**\n\t * The opacity.\n\t *\n\t * @type {number}\n\t * @default 1\n\t */\n\tget opacity() {\n\n\t\treturn this.uniforms.opacity.value;\n\n\t}\n\n\tset opacity( value ) {\n\n\t\tif ( ! this.uniforms ) return;\n\t\tthis.uniforms.opacity.value = value;\n\n\t}\n\n\t/**\n\t * The size of the viewport, in screen pixels. This must be kept updated to make\n\t * screen-space rendering accurate.The `LineSegments2.onBeforeRender` callback\n\t * performs the update for visible objects.\n\t *\n\t * @type {Vector2}\n\t */\n\tget resolution() {\n\n\t\treturn this.uniforms.resolution.value;\n\n\t}\n\n\tset resolution( value ) {\n\n\t\tthis.uniforms.resolution.value.copy( value );\n\n\t}\n\n\t/**\n\t * Whether to use alphaToCoverage or not. When enabled, this can improve the\n\t * anti-aliasing of line edges when using MSAA.\n\t *\n\t * @type {boolean}\n\t */\n\tget alphaToCoverage() {\n\n\t\treturn 'USE_ALPHA_TO_COVERAGE' in this.defines;\n\n\t}\n\n\tset alphaToCoverage( value ) {\n\n\t\tif ( ! this.defines ) return;\n\n\t\tif ( ( value === true ) !== this.alphaToCoverage ) {\n\n\t\t\tthis.needsUpdate = true;\n\n\t\t}\n\n\t\tif ( value === true ) {\n\n\t\t\tthis.defines.USE_ALPHA_TO_COVERAGE = '';\n\n\t\t} else {\n\n\t\t\tdelete this.defines.USE_ALPHA_TO_COVERAGE;\n\n\t\t}\n\n\t}\n\n}\n\nexport { LineMaterial };\n"],"mappings":"AAAA,SACCA,SAAS,EACTC,cAAc,EACdC,WAAW,EACXC,aAAa,EACbC,OAAO,QACD,OAAO;AAEdF,WAAW,CAACG,IAAI,GAAG;EAElBC,UAAU,EAAE;IAAEC,KAAK,EAAE;EAAE,CAAC;EACxBC,SAAS,EAAE;IAAED,KAAK,EAAE;EAAE,CAAC;EACvBE,UAAU,EAAE;IAAEF,KAAK,EAAE,IAAIH,OAAO,CAAE,CAAC,EAAE,CAAE;EAAE,CAAC;EAC1CM,UAAU,EAAE;IAAEH,KAAK,EAAE;EAAE,CAAC;EACxBI,SAAS,EAAE;IAAEJ,KAAK,EAAE;EAAE,CAAC;EACvBK,QAAQ,EAAE;IAAEL,KAAK,EAAE;EAAE,CAAC;EACtBM,OAAO,EAAE;IAAEN,KAAK,EAAE;EAAE,CAAC,CAAC;AAEvB,CAAC;AAEDP,SAAS,CAAE,MAAM,CAAE,GAAG;EAErBc,QAAQ,EAAEX,aAAa,CAACY,KAAK,CAAE,CAC9Bb,WAAW,CAACc,MAAM,EAClBd,WAAW,CAACe,GAAG,EACff,WAAW,CAACG,IAAI,CACf,CAAC;EAEHacAAc,EACd,UAAU;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}