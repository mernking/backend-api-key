{"ast":null,"code":"var _jsxFileName = \"/home/david/Documents/projects/works/sass/backend api key/frontend/src/components/GlobeComponent.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from \"react\";\nimport Globe from \"three-globe\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction GlobeComponent({\n  logs\n}) {\n  _s();\n  const globeEl = useRef();\n  useEffect(() => {\n    // Filter valid logs\n    const geoLogs = logs.filter(log => log.country && log.city);\n\n    // Group logs by country\n    const countryData = geoLogs.reduce((acc, log) => {\n      const country = log.country;\n      if (!acc[country]) {\n        acc[country] = {\n          name: country,\n          count: 0,\n          lat: 0,\n          lng: 0\n        };\n      }\n      acc[country].count += 1;\n      const coords = getApproximateCoords(country, log.city);\n      acc[country].lat = coords.lat;\n      acc[country].lng = coords.lng;\n      return acc;\n    }, {});\n    const countries = Object.values(countryData);\n    const world = new Globe(globeEl.current).globeImageUrl(\"//unpkg.com/three-globe/example/img/earth-night.jpg\").backgroundImageUrl(\"//unpkg.com/three-globe/example/img/night-sky.png\").pointsData(countries).pointLat(\"lat\").pointLng(\"lng\").pointColor(() => \"#ff6b6b\").pointAltitude(0.01).pointRadius(\"count\").pointsMerge(true).pointLabel(d => `\n        <div style=\"background: rgba(0,0,0,0.8); color: white; padding: 5px; border-radius: 3px;\">\n          <b>${d.name}</b><br/>\n          Requests: ${d.count}\n        </div>\n      `);\n\n    // Auto-rotate\n    world.controls().autoRotate = true;\n    world.controls().autoRotateSpeed = 0.6;\n\n    // Add and position the globe\n    world(globeEl.current);\n\n    // Cleanup function\n    return () => {\n      if (globeEl.current) {\n        globeEl.current.innerHTML = \"\";\n      }\n    };\n  }, [logs]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: globeEl,\n    style: {\n      width: \"100%\",\n      height: \"100%\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 10\n  }, this);\n}\n\n// üåç Helper: Approximate coordinates for countries\n_s(GlobeComponent, \"EFxWCNvYXoXG6t8JTJFN0+m3ZSM=\");\n_c = GlobeComponent;\nfunction getApproximateCoords(country, city) {\n  const coords = {\n    'Nigeria': {\n      lat: 9.0820,\n      lng: 8.6753\n    },\n    'United States': {\n      lat: 37.0902,\n      lng: -95.7129\n    },\n    'United Kingdom': {\n      lat: 55.3781,\n      lng: -3.4360\n    },\n    'Germany': {\n      lat: 51.1657,\n      lng: 10.4515\n    },\n    'France': {\n      lat: 46.2276,\n      lng: 2.2137\n    },\n    'Japan': {\n      lat: 36.2048,\n      lng: 138.2529\n    },\n    'Australia': {\n      lat: -25.2744,\n      lng: 133.7751\n    },\n    'Canada': {\n      lat: 56.1304,\n      lng: -106.3468\n    },\n    'Brazil': {\n      lat: -14.2350,\n      lng: -51.9253\n    },\n    'India': {\n      lat: 20.5937,\n      lng: 78.9629\n    },\n    'China': {\n      lat: 35.8617,\n      lng: 104.1954\n    },\n    'Russia': {\n      lat: 61.5240,\n      lng: 105.3188\n    },\n    'South Africa': {\n      lat: -30.5595,\n      lng: 22.9375\n    },\n    'Mexico': {\n      lat: 23.6345,\n      lng: -102.5528\n    },\n    'Argentina': {\n      lat: -38.4161,\n      lng: -63.6167\n    }\n  };\n  return coords[country] || {\n    lat: Math.random() * 180 - 90,\n    lng: Math.random() * 360 - 180\n  };\n}\nexport default GlobeComponent;\nvar _c;\n$RefreshReg$(_c, \"GlobeComponent\");","map":{"version":3,"names":["React","useEffect","useRef","Globe","jsxDEV","_jsxDEV","GlobeComponent","logs","_s","globeEl","geoLogs","filter","log","country","city","countryData","reduce","acc","name","count","lat","lng","coords","getApproximateCoords","countries","Object","values","world","current","globeImageUrl","backgroundImageUrl","pointsData","pointLat","pointLng","pointColor","pointAltitude","pointRadius","pointsMerge","pointLabel","d","controls","autoRotate","autoRotateSpeed","innerHTML","ref","style","width","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","Math","random","$RefreshReg$"],"sources":["/home/david/Documents/projects/works/sass/backend api key/frontend/src/components/GlobeComponent.js"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport Globe from \"three-globe\";\n\nfunction GlobeComponent({ logs }) {\n  const globeEl = useRef();\n\n  useEffect(() => {\n    // Filter valid logs\n    const geoLogs = logs.filter((log) => log.country && log.city);\n\n    // Group logs by country\n    const countryData = geoLogs.reduce((acc, log) => {\n      const country = log.country;\n      if (!acc[country]) {\n        acc[country] = {\n          name: country,\n          count: 0,\n          lat: 0,\n          lng: 0,\n        };\n      }\n      acc[country].count += 1;\n      const coords = getApproximateCoords(country, log.city);\n      acc[country].lat = coords.lat;\n      acc[country].lng = coords.lng;\n      return acc;\n    }, {});\n\n    const countries = Object.values(countryData);\n\n    const world = new Globe(globeEl.current)\n      .globeImageUrl(\"//unpkg.com/three-globe/example/img/earth-night.jpg\")\n      .backgroundImageUrl(\"//unpkg.com/three-globe/example/img/night-sky.png\")\n      .pointsData(countries)\n      .pointLat(\"lat\")\n      .pointLng(\"lng\")\n      .pointColor(() => \"#ff6b6b\")\n      .pointAltitude(0.01)\n      .pointRadius(\"count\")\n      .pointsMerge(true)\n      .pointLabel(d => `\n        <div style=\"background: rgba(0,0,0,0.8); color: white; padding: 5px; border-radius: 3px;\">\n          <b>${d.name}</b><br/>\n          Requests: ${d.count}\n        </div>\n      `);\n\n    // Auto-rotate\n    world.controls().autoRotate = true;\n    world.controls().autoRotateSpeed = 0.6;\n\n    // Add and position the globe\n    world(globeEl.current);\n\n    // Cleanup function\n    return () => {\n      if (globeEl.current) {\n        globeEl.current.innerHTML = \"\";\n      }\n    };\n  }, [logs]);\n\n  return <div ref={globeEl} style={{ width: \"100%\", height: \"100%\" }} />;\n}\n\n// üåç Helper: Approximate coordinates for countries\nfunction getApproximateCoords(country, city) {\n  const coords = {\n    'Nigeria': { lat: 9.0820, lng: 8.6753 },\n    'United States': { lat: 37.0902, lng: -95.7129 },\n    'United Kingdom': { lat: 55.3781, lng: -3.4360 },\n    'Germany': { lat: 51.1657, lng: 10.4515 },\n    'France': { lat: 46.2276, lng: 2.2137 },\n    'Japan': { lat: 36.2048, lng: 138.2529 },\n    'Australia': { lat: -25.2744, lng: 133.7751 },\n    'Canada': { lat: 56.1304, lng: -106.3468 },\n    'Brazil': { lat: -14.2350, lng: -51.9253 },\n    'India': { lat: 20.5937, lng: 78.9629 },\n    'China': { lat: 35.8617, lng: 104.1954 },\n    'Russia': { lat: 61.5240, lng: 105.3188 },\n    'South Africa': { lat: -30.5595, lng: 22.9375 },\n    'Mexico': { lat: 23.6345, lng: -102.5528 },\n    'Argentina': { lat: -38.4161, lng: -63.6167 },\n  };\n\n  return coords[country] || { lat: Math.random() * 180 - 90, lng: Math.random() * 360 - 180 };\n}\n\nexport default GlobeComponent;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}