{"ast":null,"code":"var _jsxFileName = \"/home/david/Documents/projects/works/sass/backend api key/frontend/src/components/GlobeComponent.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport Globe from 'three-globe';\nimport * as THREE from 'three';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction GlobeComponent({\n  logs\n}) {\n  _s();\n  const globeRef = useRef();\n  useEffect(() => {\n    if (!globeRef.current) return;\n\n    // Prepare data for the globe\n    const geoLogs = logs.filter(log => log.country && log.city);\n\n    // Group by country for globe visualization\n    const countryData = geoLogs.reduce((acc, log) => {\n      const country = log.country;\n      if (!acc[country]) {\n        acc[country] = {\n          name: country,\n          count: 0,\n          lat: 0,\n          lng: 0\n        };\n      }\n      acc[country].count += 1;\n      // Use approximate coordinates\n      const coords = getApproximateCoords(country, log.city);\n      acc[country].lat = coords.lat;\n      acc[country].lng = coords.lng;\n      return acc;\n    }, {});\n    const countries = Object.values(countryData);\n\n    // Create globe\n    const globe = new Globe(globeRef.current).globeImageUrl(\"//unpkg.com/three-globe/example/img/earth-night.jpg\").backgroundImageUrl(\"//unpkg.com/three-globe/example/img/night-sky.png\").pointsData(countries).pointLat(\"lat\").pointLng(\"lng\").pointColor(() => \"#ff6b6b\").pointAltitude(0.01).pointRadius(\"count\").pointsMerge(true).pointLabel(d => `\n    <div style=\"background: rgba(0,0,0,0.8); color: white; padding: 5px; border-radius: 3px;\">\n      <b>${d.name}</b><br/>\n      Requests: ${d.count}\n    </div>\n  `);\n\n    // Add auto-rotation\n    globe.controls().autoRotate = true;\n    globe.controls().autoRotateSpeed = 0.5;\n\n    // Add ambient light\n    const ambientLight = new THREE.AmbientLight(0xbbbbbb);\n    globe.scene().add(ambientLight);\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.6);\n    directionalLight.position.set(1, 1, 1);\n    globe.scene().add(directionalLight);\n\n    // Handle window resize\n    const handleResize = () => {\n      const currentRef = globeRef.current;\n      if (currentRef) {\n        const width = currentRef.clientWidth;\n        const height = currentRef.clientHeight;\n        globe.width(width);\n        globe.height(height);\n      }\n    };\n    window.addEventListener('resize', handleResize);\n    handleResize();\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      const currentRef = globeRef.current;\n      if (currentRef) {\n        // Properly dispose of the globe\n        currentRef.innerHTML = '';\n      }\n    };\n  }, [logs]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: globeRef,\n    style: {\n      width: '100%',\n      height: '100%'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 10\n  }, this);\n}\n\n// Helper function to get approximate coordinates\n_s(GlobeComponent, \"RnDsAY9k2/HDGJbJqxvzVF3XlM4=\");\n_c = GlobeComponent;\nfunction getApproximateCoords(country, city) {\n  const coords = {\n    'Nigeria': {\n      lat: 9.0820,\n      lng: 8.6753\n    },\n    'United States': {\n      lat: 37.0902,\n      lng: -95.7129\n    },\n    'United Kingdom': {\n      lat: 55.3781,\n      lng: -3.4360\n    },\n    'Germany': {\n      lat: 51.1657,\n      lng: 10.4515\n    },\n    'France': {\n      lat: 46.2276,\n      lng: 2.2137\n    },\n    'Japan': {\n      lat: 36.2048,\n      lng: 138.2529\n    },\n    'Australia': {\n      lat: -25.2744,\n      lng: 133.7751\n    },\n    'Canada': {\n      lat: 56.1304,\n      lng: -106.3468\n    },\n    'Brazil': {\n      lat: -14.2350,\n      lng: -51.9253\n    },\n    'India': {\n      lat: 20.5937,\n      lng: 78.9629\n    },\n    'China': {\n      lat: 35.8617,\n      lng: 104.1954\n    },\n    'Russia': {\n      lat: 61.5240,\n      lng: 105.3188\n    },\n    'South Africa': {\n      lat: -30.5595,\n      lng: 22.9375\n    },\n    'Mexico': {\n      lat: 23.6345,\n      lng: -102.5528\n    },\n    'Argentina': {\n      lat: -38.4161,\n      lng: -63.6167\n    }\n  };\n  return coords[country] || {\n    lat: Math.random() * 180 - 90,\n    lng: Math.random() * 360 - 180\n  };\n}\nexport default GlobeComponent;\nvar _c;\n$RefreshReg$(_c, \"GlobeComponent\");","map":{"version":3,"names":["React","useEffect","useRef","Globe","THREE","jsxDEV","_jsxDEV","GlobeComponent","logs","_s","globeRef","current","geoLogs","filter","log","country","city","countryData","reduce","acc","name","count","lat","lng","coords","getApproximateCoords","countries","Object","values","globe","globeImageUrl","backgroundImageUrl","pointsData","pointLat","pointLng","pointColor","pointAltitude","pointRadius","pointsMerge","pointLabel","d","controls","autoRotate","autoRotateSpeed","ambientLight","AmbientLight","scene","add","directionalLight","DirectionalLight","position","set","handleResize","currentRef","width","clientWidth","height","clientHeight","window","addEventListener","removeEventListener","innerHTML","ref","style","fileName","_jsxFileName","lineNumber","columnNumber","_c","Math","random","$RefreshReg$"],"sources":["/home/david/Documents/projects/works/sass/backend api key/frontend/src/components/GlobeComponent.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport Globe from 'three-globe';\nimport * as THREE from 'three';\n\nfunction GlobeComponent({ logs }) {\n  const globeRef = useRef();\n\n  useEffect(() => {\n    if (!globeRef.current) return;\n\n    // Prepare data for the globe\n    const geoLogs = logs.filter(log => log.country && log.city);\n\n    // Group by country for globe visualization\n    const countryData = geoLogs.reduce((acc, log) => {\n      const country = log.country;\n      if (!acc[country]) {\n        acc[country] = {\n          name: country,\n          count: 0,\n          lat: 0,\n          lng: 0,\n        };\n      }\n      acc[country].count += 1;\n      // Use approximate coordinates\n      const coords = getApproximateCoords(country, log.city);\n      acc[country].lat = coords.lat;\n      acc[country].lng = coords.lng;\n      return acc;\n    }, {});\n\n    const countries = Object.values(countryData);\n\n    // Create globe\n   const globe = new Globe(globeRef.current)\n     .globeImageUrl(\"//unpkg.com/three-globe/example/img/earth-night.jpg\")\n     .backgroundImageUrl(\"//unpkg.com/three-globe/example/img/night-sky.png\")\n     .pointsData(countries)\n     .pointLat(\"lat\")\n     .pointLng(\"lng\")\n     .pointColor(() => \"#ff6b6b\")\n     .pointAltitude(0.01)\n     .pointRadius(\"count\")\n     .pointsMerge(true)\n     .pointLabel(\n       (d) => `\n    <div style=\"background: rgba(0,0,0,0.8); color: white; padding: 5px; border-radius: 3px;\">\n      <b>${d.name}</b><br/>\n      Requests: ${d.count}\n    </div>\n  `\n     );\n\n    // Add auto-rotation\n    globe.controls().autoRotate = true;\n    globe.controls().autoRotateSpeed = 0.5;\n\n    // Add ambient light\n    const ambientLight = new THREE.AmbientLight(0xbbbbbb);\n    globe.scene().add(ambientLight);\n\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.6);\n    directionalLight.position.set(1, 1, 1);\n    globe.scene().add(directionalLight);\n\n    // Handle window resize\n    const handleResize = () => {\n      const currentRef = globeRef.current;\n      if (currentRef) {\n        const width = currentRef.clientWidth;\n        const height = currentRef.clientHeight;\n        globe.width(width);\n        globe.height(height);\n      }\n    };\n\n    window.addEventListener('resize', handleResize);\n    handleResize();\n\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      const currentRef = globeRef.current;\n      if (currentRef) {\n        // Properly dispose of the globe\n        currentRef.innerHTML = '';\n      }\n    };\n  }, [logs]);\n\n  return <div ref={globeRef} style={{ width: '100%', height: '100%' }} />;\n}\n\n// Helper function to get approximate coordinates\nfunction getApproximateCoords(country, city) {\n  const coords = {\n    'Nigeria': { lat: 9.0820, lng: 8.6753 },\n    'United States': { lat: 37.0902, lng: -95.7129 },\n    'United Kingdom': { lat: 55.3781, lng: -3.4360 },\n    'Germany': { lat: 51.1657, lng: 10.4515 },\n    'France': { lat: 46.2276, lng: 2.2137 },\n    'Japan': { lat: 36.2048, lng: 138.2529 },\n    'Australia': { lat: -25.2744, lng: 133.7751 },\n    'Canada': { lat: 56.1304, lng: -106.3468 },\n    'Brazil': { lat: -14.2350, lng: -51.9253 },\n    'India': { lat: 20.5937, lng: 78.9629 },\n    'China': { lat: 35.8617, lng: 104.1954 },\n    'Russia': { lat: 61.5240, lng: 105.3188 },\n    'South Africa': { lat: -30.5595, lng: 22.9375 },\n    'Mexico': { lat: 23.6345, lng: -102.5528 },\n    'Argentina': { lat: -38.4161, lng: -63.6167 },\n  };\n\n  return coords[country] || { lat: Math.random() * 180 - 90, lng: Math.random() * 360 - 180 };\n}\n\nexport default GlobeComponent;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}