{"ast":null,"code":"var _jsxFileName = \"/home/david/Documents/projects/works/sass/backend api key/frontend/src/components/GlobeComponent.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from \"react\";\nimport Globe from \"three-globe\";\nimport * as THREE from \"three\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction GlobeComponent({\n  logs\n}) {\n  _s();\n  const globeRef = useRef();\n  useEffect(() => {\n    if (!globeRef.current) return;\n\n    // Filter valid logs\n    const geoLogs = logs.filter(log => log.country && log.city);\n\n    // Group logs by country\n    const countryData = geoLogs.reduce((acc, log) => {\n      const country = log.country;\n      if (!acc[country]) {\n        acc[country] = {\n          name: country,\n          count: 0,\n          lat: 0,\n          lng: 0\n        };\n      }\n      acc[country].count += 1;\n      const coords = getApproximateCoords(country, log.city);\n      acc[country].lat = coords.lat;\n      acc[country].lng = coords.lng;\n      return acc;\n    }, {});\n    const countries = Object.values(countryData);\n\n    // Create the globe\n    const globe = new Globe(globeRef.current, {\n      animateIn: true\n    }).globeImageUrl(\"//unpkg.com/three-globe/example/img/earth-night.jpg\").pointsData(countries).pointLat(\"lat\").pointLng(\"lng\").pointColor(() => \"#ff6b6b\").pointAltitude(0.01).pointRadius(\"count\").pointsMerge(true).pointLabel(d => `\n        <div style=\"background: rgba(0,0,0,0.8); color: white; padding: 5px; border-radius: 3px;\">\n          <b>${d.name}</b><br/>\n          Requests: ${d.count}\n        </div>\n      `);\n\n    // üåå Load starry background using TextureLoader\n    const loader = new THREE.TextureLoader();\n    loader.load(\"//unpkg.com/three-globe/example/img/night-sky.png\", texture => {\n      globe.scene().background = texture;\n    }, undefined, error => {\n      console.error(\"Error loading background texture:\", error);\n      globe.scene().background = new THREE.Color(0x000011);\n    });\n\n    // Add lighting\n    const ambientLight = new THREE.AmbientLight(0xbbbbbb, 0.8);\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.6);\n    directionalLight.position.set(1, 1, 1);\n    globe.scene().add(ambientLight);\n    globe.scene().add(directionalLight);\n\n    // Auto-rotate setup\n    globe.controls().autoRotate = true;\n    globe.controls().autoRotateSpeed = 0.5;\n\n    // Handle window resizing\n    const handleResize = () => {\n      const container = globeRef.current;\n      if (container) {\n        const {\n          clientWidth,\n          clientHeight\n        } = container;\n        globe.width(clientWidth);\n        globe.height(clientHeight);\n      }\n    };\n    window.addEventListener(\"resize\", handleResize);\n    handleResize();\n\n    // Cleanup on unmount\n    return () => {\n      window.removeEventListener(\"resize\", handleResize);\n      if (globeRef.current) {\n        globeRef.current.innerHTML = \"\";\n      }\n    };\n  }, [logs]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: globeRef,\n    style: {\n      width: \"100%\",\n      height: \"100%\",\n      backgroundColor: \"#000011\",\n      overflow: \"hidden\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n}\n\n// üåç Helper: Approximate coordinates for countries\n_s(GlobeComponent, \"RnDsAY9k2/HDGJbJqxvzVF3XlM4=\");\n_c = GlobeComponent;\nfunction getApproximateCoords(country, city) {\n  const coords = {\n    Nigeria: {\n      lat: 9.082,\n      lng: 8.6753\n    },\n    \"United States\": {\n      lat: 37.0902,\n      lng: -95.7129\n    },\n    \"United Kingdom\": {\n      lat: 55.3781,\n      lng: -3.436\n    },\n    Germany: {\n      lat: 51.1657,\n      lng: 10.4515\n    },\n    France: {\n      lat: 46.2276,\n      lng: 2.2137\n    },\n    Japan: {\n      lat: 36.2048,\n      lng: 138.2529\n    },\n    Australia: {\n      lat: -25.2744,\n      lng: 133.7751\n    },\n    Canada: {\n      lat: 56.1304,\n      lng: -106.3468\n    },\n    Brazil: {\n      lat: -14.235,\n      lng: -51.9253\n    },\n    India: {\n      lat: 20.5937,\n      lng: 78.9629\n    },\n    China: {\n      lat: 35.8617,\n      lng: 104.1954\n    },\n    Russia: {\n      lat: 61.524,\n      lng: 105.3188\n    },\n    \"South Africa\": {\n      lat: -30.5595,\n      lng: 22.9375\n    },\n    Mexico: {\n      lat: 23.6345,\n      lng: -102.5528\n    },\n    Argentina: {\n      lat: -38.4161,\n      lng: -63.6167\n    }\n  };\n  return coords[country] || {\n    lat: Math.random() * 180 - 90,\n    lng: Math.random() * 360 - 180\n  };\n}\nexport default GlobeComponent;\nvar _c;\n$RefreshReg$(_c, \"GlobeComponent\");","map":{"version":3,"names":["React","useEffect","useRef","Globe","THREE","jsxDEV","_jsxDEV","GlobeComponent","logs","_s","globeRef","current","geoLogs","filter","log","country","city","countryData","reduce","acc","name","count","lat","lng","coords","getApproximateCoords","countries","Object","values","globe","animateIn","globeImageUrl","pointsData","pointLat","pointLng","pointColor","pointAltitude","pointRadius","pointsMerge","pointLabel","d","loader","TextureLoader","load","texture","scene","background","undefined","error","console","Color","ambientLight","AmbientLight","directionalLight","DirectionalLight","position","set","add","controls","autoRotate","autoRotateSpeed","handleResize","container","clientWidth","clientHeight","width","height","window","addEventListener","removeEventListener","innerHTML","ref","style","backgroundColor","overflow","fileName","_jsxFileName","lineNumber","columnNumber","_c","Nigeria","Germany","France","Japan","Australia","Canada","Brazil","India","China","Russia","Mexico","Argentina","Math","random","$RefreshReg$"],"sources":["/home/david/Documents/projects/works/sass/backend api key/frontend/src/components/GlobeComponent.js"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport  Globe from \"three-globe\";\nimport * as THREE from \"three\";\n\nfunction GlobeComponent({ logs }) {\n  const globeRef = useRef();\n\n  useEffect(() => {\n    if (!globeRef.current) return;\n\n    // Filter valid logs\n    const geoLogs = logs.filter((log) => log.country && log.city);\n\n    // Group logs by country\n    const countryData = geoLogs.reduce((acc, log) => {\n      const country = log.country;\n      if (!acc[country]) {\n        acc[country] = {\n          name: country,\n          count: 0,\n          lat: 0,\n          lng: 0,\n        };\n      }\n      acc[country].count += 1;\n      const coords = getApproximateCoords(country, log.city);\n      acc[country].lat = coords.lat;\n      acc[country].lng = coords.lng;\n      return acc;\n    }, {});\n\n    const countries = Object.values(countryData);\n\n    // Create the globe\n    const globe = new Globe(globeRef.current, { animateIn: true })\n      .globeImageUrl(\"//unpkg.com/three-globe/example/img/earth-night.jpg\")\n      .pointsData(countries)\n      .pointLat(\"lat\")\n      .pointLng(\"lng\")\n      .pointColor(() => \"#ff6b6b\")\n      .pointAltitude(0.01)\n      .pointRadius(\"count\")\n      .pointsMerge(true)\n      .pointLabel(\n        (d) => `\n        <div style=\"background: rgba(0,0,0,0.8); color: white; padding: 5px; border-radius: 3px;\">\n          <b>${d.name}</b><br/>\n          Requests: ${d.count}\n        </div>\n      `\n      );\n\n    // üåå Load starry background using TextureLoader\n    const loader = new THREE.TextureLoader();\n    loader.load(\n      \"//unpkg.com/three-globe/example/img/night-sky.png\",\n      (texture) => {\n        globe.scene().background = texture;\n      },\n      undefined,\n      (error) => {\n        console.error(\"Error loading background texture:\", error);\n        globe.scene().background = new THREE.Color(0x000011);\n      }\n    );\n\n    // Add lighting\n    const ambientLight = new THREE.AmbientLight(0xbbbbbb, 0.8);\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.6);\n    directionalLight.position.set(1, 1, 1);\n    globe.scene().add(ambientLight);\n    globe.scene().add(directionalLight);\n\n    // Auto-rotate setup\n    globe.controls().autoRotate = true;\n    globe.controls().autoRotateSpeed = 0.5;\n\n    // Handle window resizing\n    const handleResize = () => {\n      const container = globeRef.current;\n      if (container) {\n        const { clientWidth, clientHeight } = container;\n        globe.width(clientWidth);\n        globe.height(clientHeight);\n      }\n    };\n\n    window.addEventListener(\"resize\", handleResize);\n    handleResize();\n\n    // Cleanup on unmount\n    return () => {\n      window.removeEventListener(\"resize\", handleResize);\n      if (globeRef.current) {\n        globeRef.current.innerHTML = \"\";\n      }\n    };\n  }, [logs]);\n\n  return (\n    <div\n      ref={globeRef}\n      style={{\n        width: \"100%\",\n        height: \"100%\",\n        backgroundColor: \"#000011\",\n        overflow: \"hidden\",\n      }}\n    />\n  );\n}\n\n// üåç Helper: Approximate coordinates for countries\nfunction getApproximateCoords(country, city) {\n  const coords = {\n    Nigeria: { lat: 9.082, lng: 8.6753 },\n    \"United States\": { lat: 37.0902, lng: -95.7129 },\n    \"United Kingdom\": { lat: 55.3781, lng: -3.436 },\n    Germany: { lat: 51.1657, lng: 10.4515 },\n    France: { lat: 46.2276, lng: 2.2137 },\n    Japan: { lat: 36.2048, lng: 138.2529 },\n    Australia: { lat: -25.2744, lng: 133.7751 },\n    Canada: { lat: 56.1304, lng: -106.3468 },\n    Brazil: { lat: -14.235, lng: -51.9253 },\n    India: { lat: 20.5937, lng: 78.9629 },\n    China: { lat: 35.8617, lng: 104.1954 },\n    Russia: { lat: 61.524, lng: 105.3188 },\n    \"South Africa\": { lat: -30.5595, lng: 22.9375 },\n    Mexico: { lat: 23.6345, lng: -102.5528 },\n    Argentina: { lat: -38.4161, lng: -63.6167 },\n  };\n\n  return (\n    coords[country] || {\n      lat: Math.random() * 180 - 90,\n      lng: Math.random() * 360 - 180,\n    }\n  );\n}\n\nexport default GlobeComponent;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}