{"ast":null,"code":"import { Delaunay } from \"d3-delaunay\";\nimport { geoRotation, geoStereographic } from \"d3-geo\";\nimport { extent } from \"d3-array\";\nimport { asin, atan2, cos, degrees, max, min, radians, sign, sin, sqrt } from \"./math.js\";\nimport { cartesianNormalize as normalize, cartesianCross as cross, cartesianDot as dot, cartesianAdd } from \"./cartesian.js\";\n\n// Converts 3D Cartesian to spherical coordinates (degrees).\nfunction spherical(cartesian) {\n  return [atan2(cartesian[1], cartesian[0]) * degrees, asin(max(-1, min(1, cartesian[2]))) * degrees];\n}\n\n// Converts spherical coordinates (degrees) to 3D Cartesian.\nfunction cartesian(coordinates) {\n  const lambda = coordinates[0] * radians,\n    phi = coordinates[1] * radians,\n    cosphi = cos(phi);\n  return [cosphi * cos(lambda), cosphi * sin(lambda), sin(phi)];\n}\n\n// Spherical excess of a triangle (in spherical coordinates)\nexport function excess(triangle) {\n  triangle = triangle.map(p => cartesian(p));\n  return dot(triangle[0], cross(triangle[2], triangle[1]));\n}\nexport function geoDelaunay(points) {\n  const delaunay = geo_delaunay_from(points),\n    triangles = geo_triangles(delaunay),\n    edges = geo_edges(triangles, points),\n    neighbors = geo_neighbors(triangles, points.length),\n    find = geo_find(neighbors, points),\n    // Voronoi ; could take a center function as an argument\n    circumcenters = geo_circumcenters(triangles, points),\n    {\n      polygons,\n      centers\n    } = geo_polygons(circumcenters, triangles, points),\n    mesh = geo_mesh(polygons),\n    hull = geo_hull(triangles, points),\n    // Urquhart ; returns a function that takes a distance array as argument.\n    urquhart = geo_urquhart(edges, triangles);\n  return {\n    delaunay,\n    edges,\n    triangles,\n    centers,\n    neighbors,\n    polygons,\n    mesh,\n    hull,\n    urquhart,\n    find\n  };\n}\nfunction geo_find(neighbors, points) {\n  function distance2(a, b) {\n    let x = a[0] - b[0],\n      y = a[1] - b[1],\n      z = a[2] - b[2];\n    return x * x + y * y + z * z;\n  }\n  return function find(x, y, next) {\n    if (next === undefined) next = 0;\n    let cell,\n      dist,\n      found = next;\n    const xyz = cartesian([x, y]);\n    do {\n      cell = next;\n      next = null;\n      dist = distance2(xyz, cartesian(points[cell]));\n      neighbors[cell].forEach(i => {\n        let ndist = distance2(xyz, cartesian(points[i]));\n        if (ndist < dist) {\n          dist = ndist;\n          next = i;\n          found = i;\n          return;\n        }\n      });\n    } while (next !== null);\n    return found;\n  };\n}\nfunction geo_delaunay_from(points) {\n  if (points.length < 2) return {};\n\n  // find a valid point to send to infinity\n  let pivot = 0;\n  while (isNaN(points[pivot][0] + points[pivot][1]) && pivot++ < points.length);\n  const r = geoRotation(points[pivot]),\n    projection = geoStereographic().translate([0, 0]).scale(1).rotate(r.invert([180, 0]));\n  points = points.map(projection);\n  const zeros = [];\n  let max2 = 1;\n  for (let i = 0, n = points.length; i < n; i++) {\n    let m = points[i][0] ** 2 + points[i][1] ** 2;\n    if (!isFinite(m) || m > 1e32) zeros.push(i);else if (m > max2) max2 = m;\n  }\n  const FAR = 1e6 * sqrt(max2);\n  zeros.forEach(i => points[i] = [FAR, 0]);\n\n  // Add infinite horizon points\n  points.push([0, FAR]);\n  points.push([-FAR, 0]);\n  points.push([0, -FAR]);\n  const delaunay = Delaunay.from(points);\n  delaunay.projection = projection;\n\n  // clean up the triangulation\n  const {\n    triangles,\n    halfedges,\n    inedges\n  } = delaunay;\n  const degenerate = [];\n  for (let i = 0, l = halfedges.length; i < l; i++) {\n    if (halfedges[i] < 0) {\n      const j = i % 3 == 2 ? i - 2 : i + 1;\n      const k = i % 3 == 0 ? i + 2 : i - 1;\n      const a = halfedges[j];\n      const b = halfedges[k];\n      halfedges[a] = b;\n      halfedges[b] = a;\n      halfedges[j] = halfedges[k] = -1;\n      triangles[i] = triangles[j] = triangles[k] = pivot;\n      inedges[triangles[a]] = a % 3 == 0 ? a + 2 : a - 1;\n      inedges[triangles[b]] = b % 3 == 0 ? b + 2 : b - 1;\n      degenerate.push(Math.min(i, j, k));\n      i += 2 - i % 3;\n    } else if (triangles[i] > points.length - 3 - 1) {\n      triangles[i] = pivot;\n    }\n  }\n\n  // there should always be 4 degenerate triangles\n  // console.warn(degenerate);\n  return delaunay;\n}\nfunction geo_edges(triangles, points) {\n  const _index = new Set();\n  if (points.length === 2) return [[0, 1]];\n  triangles.forEach(tri => {\n    if (tri[0] === tri[1]) return;\n    if (excess(tri.map(i => points[i])) < 0) return;\n    for (let i = 0, j; i < 3; i++) {\n      j = (i + 1) % 3;\n      _index.add(extent([tri[i], tri[j]]).join(\"-\"));\n    }\n  });\n  return Array.from(_index, d => d.split(\"-\").map(Number));\n}\nfunction geo_triangles(delaunay) {\n  const {\n    triangles\n  } = delaunay;\n  if (!triangles) return [];\n  const geo_triangles = [];\n  for (let i = 0, n = triangles.length / 3; i < n; i++) {\n    const a = triangles[3 * i],\n      b = triangles[3 * i + 1],\n      c = triangles[3 * i + 2];\n    if (a !== b && b !== c) {\n      geo_triangles.push([a, c, b]);\n    }\n  }\n  return geo_triangles;\n}\nfunction geo_circumcenters(triangles, points) {\n  // if (!use_centroids) {\n  return triangles.map(tri => {\n    const c = tri.map(i => points[i]).map(cartesian),\n      V = cartesianAdd(cartesianAdd(cross(c[1], c[0]), cross(c[2], c[1])), cross(c[0], c[2]));\n    return spherical(normalize(V));\n  });\n  /*} else {\n    return triangles.map(tri => {\n      return d3.geoCentroid({\n        type: \"MultiPoint\",\n        coordinates: tri.map(i => points[i])\n      });\n    });\n  }*/\n}\nfunction geo_neighbors(triangles, npoints) {\n  const neighbors = [];\n  triangles.forEach(tri => {\n    for (let j = 0; j < 3; j++) {\n      const a = tri[j],\n        b = tri[(j + 1) % 3];\n      neighbors[a] = neighbors[a] || [];\n      neighbors[a].push(b);\n    }\n  });\n\n  // degenerate cases\n  if (triangles.length === 0) {\n    if (npoints === 2) neighbors[0] = [1], neighbors[1] = [0];else if (npoints === 1) neighbors[0] = [];\n  }\n  return neighbors;\n}\nfunction geo_polygons(circumcenters, triangles, points) {\n  const polygons = [];\n  const centers = circumcenters.slice();\n  if (triangles.length === 0) {\n    if (points.length < 2) return {\n      polygons,\n      centers\n    };\n    if (points.length === 2) {\n      // two hemispheres\n      const a = cartesian(points[0]),\n        b = cartesian(points[1]),\n        m = normalize(cartesianAdd(a, b)),\n        d = normalize(cross(a, b)),\n        c = cross(m, d);\n      const poly = [m, cross(m, c), cross(cross(m, c), c), cross(cross(cross(m, c), c), c)].map(spherical).map(supplement);\n      return polygons.push(poly), polygons.push(poly.slice().reverse()), {\n        polygons,\n        centers\n      };\n    }\n  }\n  triangles.forEach((tri, t) => {\n    for (let j = 0; j < 3; j++) {\n      const a = tri[j],\n        b = tri[(j + 1) % 3],\n        c = tri[(j + 2) % 3];\n      polygons[a] = polygons[a] || [];\n      polygons[a].push([b, c, t, [a, b, c]]);\n    }\n  });\n\n  // reorder each polygon\n  const reordered = polygons.map(poly => {\n    const p = [poly[0][2]]; // t\n    let k = poly[0][1]; // k = c\n    for (let i = 1; i < poly.length; i++) {\n      // look for b = k\n      for (let j = 0; j < poly.length; j++) {\n        if (poly[j][0] == k) {\n          k = poly[j][1];\n          p.push(poly[j][2]);\n          break;\n        }\n      }\n    }\n    if (p.length > 2) {\n      return p;\n    } else if (p.length == 2) {\n      const R0 = o_midpoint(points[poly[0][3][0]], points[poly[0][3][1]], centers[p[0]]),\n        R1 = o_midpoint(points[poly[0][3][2]], points[poly[0][3][0]], centers[p[0]]);\n      const i0 = supplement(R0),\n        i1 = supplement(R1);\n      return [p[0], i1, p[1], i0];\n    }\n  });\n  function supplement(point) {\n    let f = -1;\n    centers.slice(triangles.length, Infinity).forEach((p, i) => {\n      if (p[0] === point[0] && p[1] === point[1]) f = i + triangles.length;\n    });\n    if (f < 0) f = centers.length, centers.push(point);\n    return f;\n  }\n  return {\n    polygons: reordered,\n    centers\n  };\n}\nfunction o_midpoint(a, b, c) {\n  a = cartesian(a);\n  b = cartesian(b);\n  c = cartesian(c);\n  const s = sign(dot(cross(b, a), c));\n  return spherical(normalize(cartesianAdd(a, b)).map(d => s * d));\n}\nfunction geo_mesh(polygons) {\n  const mesh = [];\n  polygons.forEach(poly => {\n    if (!poly) return;\n    let p = poly[poly.length - 1];\n    for (let q of poly) {\n      if (q > p) mesh.push([p, q]);\n      p = q;\n    }\n  });\n  return mesh;\n}\nfunction geo_urquhart(edges, triangles) {\n  return function (distances) {\n    const _lengths = new Map(),\n      _urquhart = new Map();\n    edges.forEach((edge, i) => {\n      const u = edge.join(\"-\");\n      _lengths.set(u, distances[i]);\n      _urquhart.set(u, true);\n    });\n    triangles.forEach(tri => {\n      let l = 0,\n        remove = -1;\n      for (let j = 0; j < 3; j++) {\n        let u = extent([tri[j], tri[(j + 1) % 3]]).join(\"-\");\n        if (_lengths.get(u) > l) {\n          l = _lengths.get(u);\n          remove = u;\n        }\n      }\n      _urquhart.set(remove, false);\n    });\n    return edges.map(edge => _urquhart.get(edge.join(\"-\")));\n  };\n}\nfunction geo_hull(triangles, points) {\n  const _hull = new Set(),\n    hull = [];\n  triangles.map(tri => {\n    if (excess(tri.map(i => points[i > points.length ? 0 : i])) > 1e-12) return;\n    for (let i = 0; i < 3; i++) {\n      let e = [tri[i], tri[(i + 1) % 3]],\n        code = `${e[0]}-${e[1]}`;\n      if (_hull.has(code)) _hull.delete(code);else _hull.add(`${e[1]}-${e[0]}`);\n    }\n  });\n  const _index = new Map();\n  let start;\n  _hull.forEach(e => {\n    e = e.split(\"-\").map(Number);\n    _index.set(e[0], e[1]);\n    start = e[0];\n  });\n  if (start === undefined) return hull;\n  let next = start;\n  do {\n    hull.push(next);\n    let n = _index.get(next);\n    _index.set(next, -1);\n    next = n;\n  } while (next > -1 && next !== start);\n  return hull;\n}","map":{"version":3,"names":["Delaunay","geoRotation","geoStereographic","extent","asin","atan2","cos","degrees","max","min","radians","sign","sin","sqrt","cartesianNormalize","normalize","cartesianCross","cross","cartesianDot","dot","cartesianAdd","spherical","cartesian","coordinates","lambda","phi","cosphi","excess","triangle","map","p","geoDelaunay","points","delaunay","geo_delaunay_from","triangles","geo_triangles","edges","geo_edges","neighbors","geo_neighbors","length","find","geo_find","circumcenters","geo_circumcenters","polygons","centers","geo_polygons","mesh","geo_mesh","hull","geo_hull","urquhart","geo_urquhart","distance2","a","b","x","y","z","next","undefined","cell","dist","found","xyz","forEach","i","ndist","pivot","isNaN","r","projection","translate","scale","rotate","invert","zeros","max2","n","m","isFinite","push","FAR","from","halfedges","inedges","degenerate","l","j","k","Math","_index","Set","tri","add","join","Array","d","split","Number","c","V","npoints","slice","poly","supplement","reverse","t","reordered","R0","o_midpoint","R1","i0","i1","point","f","Infinity","s","q","distances","_lengths","Map","_urquhart","edge","u","set","remove","get","_hull","e","code","has","delete","start"],"sources":["/home/david/Documents/projects/works/sass/backend api key/frontend/node_modules/.pnpm/d3-geo-voronoi@2.1.0/node_modules/d3-geo-voronoi/src/delaunay.js"],"sourcesContent":["import { Delaunay } from \"d3-delaunay\";\nimport { geoRotation, geoStereographic } from \"d3-geo\";\nimport { extent } from \"d3-array\";\nimport {\n  asin,\n  atan2,\n  cos,\n  degrees,\n  max,\n  min,\n  radians,\n  sign,\n  sin,\n  sqrt,\n} from \"./math.js\";\nimport {\n  cartesianNormalize as normalize,\n  cartesianCross as cross,\n  cartesianDot as dot,\n  cartesianAdd,\n} from \"./cartesian.js\";\n\n// Converts 3D Cartesian to spherical coordinates (degrees).\nfunction spherical(cartesian) {\n  return [\n    atan2(cartesian[1], cartesian[0]) * degrees,\n    asin(max(-1, min(1, cartesian[2]))) * degrees,\n  ];\n}\n\n// Converts spherical coordinates (degrees) to 3D Cartesian.\nfunction cartesian(coordinates) {\n  const lambda = coordinates[0] * radians,\n    phi = coordinates[1] * radians,\n    cosphi = cos(phi);\n  return [cosphi * cos(lambda), cosphi * sin(lambda), sin(phi)];\n}\n\n// Spherical excess of a triangle (in spherical coordinates)\nexport function excess(triangle) {\n  triangle = triangle.map((p) => cartesian(p));\n  return dot(triangle[0], cross(triangle[2], triangle[1]));\n}\n\nexport function geoDelaunay(points) {\n  const delaunay = geo_delaunay_from(points),\n    triangles = geo_triangles(delaunay),\n    edges = geo_edges(triangles, points),\n    neighbors = geo_neighbors(triangles, points.length),\n    find = geo_find(neighbors, points),\n    // Voronoi ; could take a center function as an argument\n    circumcenters = geo_circumcenters(triangles, points),\n    { polygons, centers } = geo_polygons(circumcenters, triangles, points),\n    mesh = geo_mesh(polygons),\n    hull = geo_hull(triangles, points),\n    // Urquhart ; returns a function that takes a distance array as argument.\n    urquhart = geo_urquhart(edges, triangles);\n  return {\n    delaunay,\n    edges,\n    triangles,\n    centers,\n    neighbors,\n    polygons,\n    mesh,\n    hull,\n    urquhart,\n    find,\n  };\n}\n\nfunction geo_find(neighbors, points) {\n  function distance2(a, b) {\n    let x = a[0] - b[0],\n      y = a[1] - b[1],\n      z = a[2] - b[2];\n    return x * x + y * y + z * z;\n  }\n\n  return function find(x, y, next) {\n    if (next === undefined) next = 0;\n    let cell,\n      dist,\n      found = next;\n    const xyz = cartesian([x, y]);\n    do {\n      cell = next;\n      next = null;\n      dist = distance2(xyz, cartesian(points[cell]));\n      neighbors[cell].forEach((i) => {\n        let ndist = distance2(xyz, cartesian(points[i]));\n        if (ndist < dist) {\n          dist = ndist;\n          next = i;\n          found = i;\n          return;\n        }\n      });\n    } while (next !== null);\n\n    return found;\n  };\n}\n\nfunction geo_delaunay_from(points) {\n  if (points.length < 2) return {};\n\n  // find a valid point to send to infinity\n  let pivot = 0;\n  while (isNaN(points[pivot][0] + points[pivot][1]) && pivot++ < points.length);\n\n  const r = geoRotation(points[pivot]),\n    projection = geoStereographic()\n      .translate([0, 0])\n      .scale(1)\n      .rotate(r.invert([180, 0]));\n  points = points.map(projection);\n\n  const zeros = [];\n  let max2 = 1;\n  for (let i = 0, n = points.length; i < n; i++) {\n    let m = points[i][0] ** 2 + points[i][1] ** 2;\n    if (!isFinite(m) || m > 1e32) zeros.push(i);\n    else if (m > max2) max2 = m;\n  }\n\n  const FAR = 1e6 * sqrt(max2);\n\n  zeros.forEach((i) => (points[i] = [FAR, 0]));\n\n  // Add infinite horizon points\n  points.push([0, FAR]);\n  points.push([-FAR, 0]);\n  points.push([0, -FAR]);\n\n  const delaunay = Delaunay.from(points);\n\n  delaunay.projection = projection;\n\n  // clean up the triangulation\n  const { triangles, halfedges, inedges } = delaunay;\n  const degenerate = [];\n  for (let i = 0, l = halfedges.length; i < l; i++) {\n    if (halfedges[i] < 0) {\n      const j = i % 3 == 2 ? i - 2 : i + 1;\n      const k = i % 3 == 0 ? i + 2 : i - 1;\n      const a = halfedges[j];\n      const b = halfedges[k];\n      halfedges[a] = b;\n      halfedges[b] = a;\n      halfedges[j] = halfedges[k] = -1;\n      triangles[i] = triangles[j] = triangles[k] = pivot;\n      inedges[triangles[a]] = a % 3 == 0 ? a + 2 : a - 1;\n      inedges[triangles[b]] = b % 3 == 0 ? b + 2 : b - 1;\n      degenerate.push(Math.min(i, j, k));\n      i += 2 - (i % 3);\n    } else if (triangles[i] > points.length - 3 - 1) {\n      triangles[i] = pivot;\n    }\n  }\n\n  // there should always be 4 degenerate triangles\n  // console.warn(degenerate);\n  return delaunay;\n}\n\nfunction geo_edges(triangles, points) {\n  const _index = new Set();\n  if (points.length === 2) return [[0, 1]];\n  triangles.forEach((tri) => {\n    if (tri[0] === tri[1]) return;\n    if (excess(tri.map((i) => points[i])) < 0) return;\n    for (let i = 0, j; i < 3; i++) {\n      j = (i + 1) % 3;\n      _index.add(extent([tri[i], tri[j]]).join(\"-\"));\n    }\n  });\n  return Array.from(_index, (d) => d.split(\"-\").map(Number));\n}\n\nfunction geo_triangles(delaunay) {\n  const { triangles } = delaunay;\n  if (!triangles) return [];\n\n  const geo_triangles = [];\n  for (let i = 0, n = triangles.length / 3; i < n; i++) {\n    const a = triangles[3 * i],\n      b = triangles[3 * i + 1],\n      c = triangles[3 * i + 2];\n    if (a !== b && b !== c) {\n      geo_triangles.push([a, c, b]);\n    }\n  }\n  return geo_triangles;\n}\n\nfunction geo_circumcenters(triangles, points) {\n  // if (!use_centroids) {\n  return triangles.map((tri) => {\n    const c = tri.map((i) => points[i]).map(cartesian),\n      V = cartesianAdd(\n        cartesianAdd(cross(c[1], c[0]), cross(c[2], c[1])),\n        cross(c[0], c[2])\n      );\n    return spherical(normalize(V));\n  });\n  /*} else {\n    return triangles.map(tri => {\n      return d3.geoCentroid({\n        type: \"MultiPoint\",\n        coordinates: tri.map(i => points[i])\n      });\n    });\n  }*/\n}\n\nfunction geo_neighbors(triangles, npoints) {\n  const neighbors = [];\n  triangles.forEach((tri) => {\n    for (let j = 0; j < 3; j++) {\n      const a = tri[j],\n        b = tri[(j + 1) % 3];\n      neighbors[a] = neighbors[a] || [];\n      neighbors[a].push(b);\n    }\n  });\n\n  // degenerate cases\n  if (triangles.length === 0) {\n    if (npoints === 2) (neighbors[0] = [1]), (neighbors[1] = [0]);\n    else if (npoints === 1) neighbors[0] = [];\n  }\n\n  return neighbors;\n}\n\nfunction geo_polygons(circumcenters, triangles, points) {\n  const polygons = [];\n\n  const centers = circumcenters.slice();\n\n  if (triangles.length === 0) {\n    if (points.length < 2) return { polygons, centers };\n    if (points.length === 2) {\n      // two hemispheres\n      const a = cartesian(points[0]),\n        b = cartesian(points[1]),\n        m = normalize(cartesianAdd(a, b)),\n        d = normalize(cross(a, b)),\n        c = cross(m, d);\n      const poly = [\n        m,\n        cross(m, c),\n        cross(cross(m, c), c),\n        cross(cross(cross(m, c), c), c),\n      ]\n        .map(spherical)\n        .map(supplement);\n      return (\n        polygons.push(poly),\n        polygons.push(poly.slice().reverse()),\n        { polygons, centers }\n      );\n    }\n  }\n\n  triangles.forEach((tri, t) => {\n    for (let j = 0; j < 3; j++) {\n      const a = tri[j],\n        b = tri[(j + 1) % 3],\n        c = tri[(j + 2) % 3];\n      polygons[a] = polygons[a] || [];\n      polygons[a].push([b, c, t, [a, b, c]]);\n    }\n  });\n\n  // reorder each polygon\n  const reordered = polygons.map((poly) => {\n    const p = [poly[0][2]]; // t\n    let k = poly[0][1]; // k = c\n    for (let i = 1; i < poly.length; i++) {\n      // look for b = k\n      for (let j = 0; j < poly.length; j++) {\n        if (poly[j][0] == k) {\n          k = poly[j][1];\n          p.push(poly[j][2]);\n          break;\n        }\n      }\n    }\n\n    if (p.length > 2) {\n      return p;\n    } else if (p.length == 2) {\n      const R0 = o_midpoint(\n          points[poly[0][3][0]],\n          points[poly[0][3][1]],\n          centers[p[0]]\n        ),\n        R1 = o_midpoint(\n          points[poly[0][3][2]],\n          points[poly[0][3][0]],\n          centers[p[0]]\n        );\n      const i0 = supplement(R0),\n        i1 = supplement(R1);\n      return [p[0], i1, p[1], i0];\n    }\n  });\n\n  function supplement(point) {\n    let f = -1;\n    centers.slice(triangles.length, Infinity).forEach((p, i) => {\n      if (p[0] === point[0] && p[1] === point[1]) f = i + triangles.length;\n    });\n    if (f < 0) (f = centers.length), centers.push(point);\n    return f;\n  }\n\n  return { polygons: reordered, centers };\n}\n\nfunction o_midpoint(a, b, c) {\n  a = cartesian(a);\n  b = cartesian(b);\n  c = cartesian(c);\n  const s = sign(dot(cross(b, a), c));\n  return spherical(normalize(cartesianAdd(a, b)).map((d) => s * d));\n}\n\nfunction geo_mesh(polygons) {\n  const mesh = [];\n  polygons.forEach((poly) => {\n    if (!poly) return;\n    let p = poly[poly.length - 1];\n    for (let q of poly) {\n      if (q > p) mesh.push([p, q]);\n      p = q;\n    }\n  });\n  return mesh;\n}\n\nfunction geo_urquhart(edges, triangles) {\n  return function (distances) {\n    const _lengths = new Map(),\n      _urquhart = new Map();\n    edges.forEach((edge, i) => {\n      const u = edge.join(\"-\");\n      _lengths.set(u, distances[i]);\n      _urquhart.set(u, true);\n    });\n\n    triangles.forEach((tri) => {\n      let l = 0,\n        remove = -1;\n      for (let j = 0; j < 3; j++) {\n        let u = extent([tri[j], tri[(j + 1) % 3]]).join(\"-\");\n        if (_lengths.get(u) > l) {\n          l = _lengths.get(u);\n          remove = u;\n        }\n      }\n      _urquhart.set(remove, false);\n    });\n\n    return edges.map((edge) => _urquhart.get(edge.join(\"-\")));\n  };\n}\n\nfunction geo_hull(triangles, points) {\n  const _hull = new Set(),\n    hull = [];\n  triangles.map((tri) => {\n    if (excess(tri.map((i) => points[i > points.length ? 0 : i])) > 1e-12)\n      return;\n    for (let i = 0; i < 3; i++) {\n      let e = [tri[i], tri[(i + 1) % 3]],\n        code = `${e[0]}-${e[1]}`;\n      if (_hull.has(code)) _hull.delete(code);\n      else _hull.add(`${e[1]}-${e[0]}`);\n    }\n  });\n\n  const _index = new Map();\n  let start;\n  _hull.forEach((e) => {\n    e = e.split(\"-\").map(Number);\n    _index.set(e[0], e[1]);\n    start = e[0];\n  });\n\n  if (start === undefined) return hull;\n\n  let next = start;\n  do {\n    hull.push(next);\n    let n = _index.get(next);\n    _index.set(next, -1);\n    next = n;\n  } while (next > -1 && next !== start);\n\n  return hull;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}